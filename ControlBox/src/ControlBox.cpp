static const char *RcsId = "$Header: /usr/local/CVS/DeviceServer/Generic/Motorisation/ControlBoxV2/src/ControlBox.cpp,v 1.14 2011/07/15 09:47:42 buteau Exp $";
//+=============================================================================
//
// file : 				ControlBox.cpp
//
// description :	C++ source for the ControlBox and its commands. 
//								The class is derived from Device. It represents the
//								CORBA servant object which will be accessed from the
//								network. All commands which can be executed on the
//								ControlBox are implemented in this file.
//
// project :			TANGO Device Server
//
// $Author: buteau $
//
// $Revision: 1.14 $
//
// $Log: ControlBox.cpp,v $
// Revision 1.14  2011/07/15 09:47:42  buteau
// MANTIS 19368
//
// Revision 1.12  2011/05/19 10:52:44  coquet
// some include path updated
// changes yat dependency order
//
//
// copyleft : 		European Synchrotron Radiation Facility
//								BP 220, Grenoble 38043
//								FRANCE
//
//-=============================================================================
//
//			This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//				 (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondance
//	between commands and method's name.
//
//  Command's name        |  Method's name
//	----------------------------------------
//  State                 |  dev_state()
//  Status                |  dev_status()
//  Reset                 |  reset()
//  StartMicrocode        |  start_microcode()
//  GetMicrocodeRevision  |  get_microcode_revision()
//  ExecLowLevelCmd       |  exec_low_level_cmd()
//
//===================================================================

#include <ControlBox.h>
#include <ControlBoxClass.h>

//- galil support stuffs
#include <ObjectManager.h>
#include <Box.h>

// ============================================================================
// STARTUP TIMEOUT FOR THE <HWStatusProxy>
// ============================================================================
#define kSTARTUP_TIMEOUT 3000

namespace ControlBox_ns
{

#include <PogoHelper.h>

//+----------------------------------------------------------------------------
//
// method : 		ControlBox::ControlBox(string &s)
// 
// description :	constructor for simulated ControlBox
//
// in : - cl : Pointer to the DeviceClass object
//			- s : Device name
//
//-----------------------------------------------------------------------------
ControlBox::ControlBox(Tango::DeviceClass *cl,string &s)
:Tango::Device_4Impl(cl,s.c_str())
{
	init_device();
}

ControlBox::ControlBox(Tango::DeviceClass *cl,const char *s)
:Tango::Device_4Impl(cl,s)
{
	init_device();
}

ControlBox::ControlBox(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_4Impl(cl,s,d)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		ControlBox::delete_device()
// 
// description :	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void ControlBox::delete_device()
{
	//	Delete device's allocated object
	DEBUG_STREAM << " Entering ControlBox::delete_device() " << std::endl;

  //- close the Galil-box
  galil::Box::close();

	//	Delete device's allocated object
	DELETE_SCALAR_ATTRIBUTE(attr_oKCommandCounter_read);
	DELETE_SCALAR_ATTRIBUTE(attr_badCommandCounter_read);
}

//+----------------------------------------------------------------------------
//
// method : 		ControlBox::init_device()
// 
// description :	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void ControlBox::init_device()
{
	DEBUG_STREAM << "ControlBox::ControlBox() create device " << device_name << endl;

	// Initialise variables to default values
	//--------------------------------------------
	this->m_status_str = "initializing device...";
	this->m_properties_missing = false;
	this->m_init_device_done = false;

	CREATE_SCALAR_ATTRIBUTE(attr_oKCommandCounter_read);
  *attr_oKCommandCounter_read = 0;

	CREATE_SCALAR_ATTRIBUTE(attr_badCommandCounter_read);
	*attr_badCommandCounter_read = 0;

	get_device_property();

  try
  {
    //- setup the galil::Box::Config
    galil::Box::Config gb_cfg;
    gb_cfg.galilbox_ip_addr = iPAddress;
    gb_cfg.galilbox_port = port;
    gb_cfg.status_update_period_ms = dataRecordPollingPeriod;
    gb_cfg.status_expiration_timeout_ms = 4 * dataRecordPollingPeriod;
    gb_cfg.startup_timeout_ms = kSTARTUP_TIMEOUT;
    gb_cfg.host_device = this;

    //- actual instanciation/init of the <Galil-Box>
    galil::Box::init(gb_cfg);
  }
  catch (Tango::DevFailed & df)
  {
    ERROR_STREAM << "initialization failed - Tango exception caught" << std::endl;
  	ERROR_STREAM << df << std::endl;
    Tango::DevError origin_of_pb = df.errors[df.errors.length() - 1];
    this->m_status_str = "device initialization failed ["
                       + std::string(origin_of_pb.desc.in())
                       + std::string("]");
    this->set_state(Tango::FAULT);
    return;
  }
  catch (...)
  {
    ERROR_STREAM << "initialization failed [unknown exception caught]" << std::endl;
    this->m_status_str = "device initialization failed [unknown exception caught]";
    this->set_state(Tango::FAULT);
    return;
  }

  this->m_init_device_done = true;

  this->set_state(Tango::RUNNING);

  DEBUG_STREAM << "device successfully initialized" << std::endl;
}


//+----------------------------------------------------------------------------
//
// method : 		ControlBox::get_device_property()
// 
// description :	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void ControlBox::get_device_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------
	this->m_properties_missing = false;

	iPAddress = "10.5.2.26";
  port = 5000;
  dataRecordPollingPeriod = 100;

	//	Read device properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("IPAddress"));
	dev_prop.push_back(Tango::DbDatum("Port"));
	dev_prop.push_back(Tango::DbDatum("TCPTimeOut"));
	dev_prop.push_back(Tango::DbDatum("DataRecordPollingPeriod"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	ControlBoxClass	*ds_class =
		(static_cast<ControlBoxClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize IPAddress from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  iPAddress;
	//	Try to initialize IPAddress from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  iPAddress;
	//	And try to extract IPAddress value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  iPAddress;

	//	Try to initialize Port from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  port;
	//	Try to initialize Port from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  port;
	//	And try to extract Port value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  port;

	//	Try to initialize TCPTimeOut from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  tCPTimeOut;
	//	Try to initialize TCPTimeOut from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  tCPTimeOut;
	//	And try to extract TCPTimeOut value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  tCPTimeOut;

	//	Try to initialize DataRecordPollingPeriod from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  dataRecordPollingPeriod;
	//	Try to initialize DataRecordPollingPeriod from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  dataRecordPollingPeriod;
	//	And try to extract DataRecordPollingPeriod value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dataRecordPollingPeriod;



	//	End of Automatic code generation
	//------------------------------------------------------------------
	Tango::DbData data_put;
	if (dev_prop[0].is_empty()==true)
	{
		this->m_properties_missing = true;
		Tango::DbDatum	property("IPAddress");
		property	<<	iPAddress;
		data_put.push_back(property);
	}
	if(!data_put.empty())
		get_db_device()->put_property(data_put);

}

//+----------------------------------------------------------------------------
//
// method : 		ControlBox::check_init()
// 
// description :	
//
//-----------------------------------------------------------------------------
void ControlBox::check_init () throw (Tango::DevFailed)
{
  if (! this->m_init_device_done) 
  {
    THROW_DEVFAILED(_CPTC("INITIALIZATION_FAILED"),
                    _CPTC("request rejected - device is not properly initialized"),
                    _CPTC("ControlBox::check_init"));		
  }
}

//+----------------------------------------------------------------------------
//
// method : 		ControlBox::always_executed_hook()
// 
// description :	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void ControlBox::always_executed_hook()
{

}

//+----------------------------------------------------------------------------
//
// method : 		ControlBox::read_attr_hardware
// 
// description :	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void ControlBox::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "ControlBox::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;

  this->check_init();
}

//+----------------------------------------------------------------------------
//
// method : 		ControlBox::read_oKCommandCounter
// 
// description :	Extract real attribute values for oKCommandCounter acquisition result.
//
//-----------------------------------------------------------------------------
void ControlBox::read_oKCommandCounter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ControlBox::read_oKCommandCounter(Tango::Attribute &attr) entering... "<< endl;
	
  *attr_oKCommandCounter_read = SHARED_HW_IO->health().com_success;

	attr.set_value(attr_oKCommandCounter_read);
}

//+----------------------------------------------------------------------------
//
// method : 		ControlBox::read_badCommandCounter
// 
// description :	Extract real attribute values for badCommandCounter acquisition result.
//
//-----------------------------------------------------------------------------
void ControlBox::read_badCommandCounter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ControlBox::read_badCommandCounter(Tango::Attribute &attr) entering... "<< endl;
	
  *attr_badCommandCounter_read = SHARED_HW_IO->health().com_errors;

	attr.set_value(attr_badCommandCounter_read);
}

//+------------------------------------------------------------------
/**
 *	method:	ControlBox::reset
 *
 *	description:	method to execute "Reset"
 *	resets the controlbox : Galil cmd RS
 *
 *
 */
//+------------------------------------------------------------------
void ControlBox::reset()
{
	DEBUG_STREAM << "ControlBox::reset(): entering... !" << endl;

  this->check_init();
  
  try
  {
    GALIL_BOX->reset();
  }
  catch (Tango::DevFailed & df)
  {
    ERROR_STREAM << df << std::endl;
    throw;
  }
  catch (...)
  {
    ERROR_STREAM << "unknown exception caught from Box::reset" << std::endl;
    THROW_DEVFAILED(_CPTC("UNKNOWN_ERROR"),
                    _CPTC("unknown exception caught from Box::reset"),
                    _CPTC("ControlBox::reset"));
  }
}

//+------------------------------------------------------------------
/**
 *	method:	ControlBox::start_microcode
 *
 *	description:	method to execute "StartMicrocode"
 *	starts the micocode in the controlbox
 *
 *
 */
//+------------------------------------------------------------------
void ControlBox::start_microcode()
{
	DEBUG_STREAM << "ControlBox::start_microcode(): entering... !" << endl;

  this->check_init();

  try
  {
    GALIL_BOX->start_ucode();
  }
  catch (Tango::DevFailed & df)
  {
    ERROR_STREAM << df << std::endl;
    throw;
  }
  catch (...)
  {
    ERROR_STREAM << "unknown exception caught from Box::start_ucode" << std::endl;
    THROW_DEVFAILED(_CPTC("UNKNOWN_ERROR"),
                    _CPTC("unknown exception caught from Box::start_ucode"),
                    _CPTC("ControlBox::start_microcode"));
  }
}

//+------------------------------------------------------------------
/**
* method: ControlBox::dev_state
*
* description:	method to execute "State"
* This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
*
* @return Status descrition
*
*/
//+------------------------------------------------------------------
Tango::DevState ControlBox::dev_state()
{
	Tango::DevState state;

  //- is device properly initialized?
  if (! this->m_init_device_done)
  {
		this->set_state(Tango::FAULT);
    return Tango::FAULT;
	}

  galil::Box::Status gbs;
    
  try
  {
    GALIL_BOX->status(gbs);
  }
  catch (Tango::DevFailed & df)
  {
    ERROR_STREAM << df << std::endl;
    throw;
  }
  catch (...)
  {
    ERROR_STREAM << "unknown exception caught from Box::status" << std::endl;
    THROW_DEVFAILED(_CPTC("UNKNOWN_ERROR"),
                    _CPTC("unknown exception caught from Box::status"),
                    _CPTC("ControlBox::dev_state"));
  }
  
  switch (gbs.box_state)
  {
    case galil::Box::BOX_CLOSE:
      state = Tango::CLOSE;
      break;
    case galil::Box::BOX_WARNING:
      state = Tango::ALARM;
      break;
    case galil::Box::BOX_OPEN:
      state = Tango::OPEN;
      break;
    case galil::Box::BOX_ERROR:
      state = Tango::FAULT;
      break;
    default:
      state = Tango::UNKNOWN;
      break;
  }
    
  return state;
}

//+------------------------------------------------------------------
/**
* method: ControlBox::dev_status
*
* description:	method to execute "Status"
* This command gets the device status (stored in its <i>device_status</i> data member) 
* and returns it to the caller.
*
* @return Status descrition
*
*/
//+------------------------------------------------------------------
Tango::ConstDevString ControlBox::dev_status()
{
  //- is device properly initialized?
	if (this->m_properties_missing) 
	{
    this->set_state(Tango::FAULT);
		this->m_status_str = "device initialization failed [undefined critical device properties]";
		this->set_status(this->m_status_str.c_str());
		return this->m_status_str.c_str();
	}

//  std::string current_status;
  current_status.clear();
  
  //- is device properly initialized?
  if (! this->m_init_device_done)
  {
    this->set_state(Tango::FAULT);
    current_status = this->m_status_str.c_str();
    current_status += "\n";
  }

  //- get current status of the Galil-box controller
  galil::Box::Status gbs;
  try
  {
    GALIL_BOX->status(gbs);
  }
  catch (Tango::DevFailed & df)
  {
    ERROR_STREAM << df << std::endl;
    current_status += "unknown status - Tango exception caught in ControlBox::dev_status";
    return current_status.c_str();
    
  }
  catch (...)
  {
    ERROR_STREAM << "unknown exception caught from Box::status" << std::endl;
    current_status += "unknown status - unknown exception caught in ControlBox::dev_status";
    return current_status.c_str();
  }

  std::string hwio_status;
  switch (gbs.com_state)
  {
    case galil::Box::COM_CONNECTED:
    case galil::Box::COM_CONNECTING:
    case galil::Box::COM_DISCONNECTED:
      if (this->m_init_device_done)
        current_status = "device is up and running";
      break;
    case galil::Box::COM_DISCONNECTED_ON_COM_ERROR:
      if (this->m_init_device_done)
        current_status = "device is in ALARM";
      break;
    case galil::Box::COM_FAULT:
    case galil::Box::COM_CONNECTION_FAILED:
      if (this->m_init_device_done)
        current_status = "device is in FAULT";
      break;
    default:
      if (this->m_init_device_done)
        current_status = "device state is UNKNOWN";
      break;
  }

  current_status += std::string("\n") + gbs.status;
  this->set_status(current_status);

	return current_status.c_str();
}

//+------------------------------------------------------------------
/**
 *	method:	ControlBox::get_microcode_revision
 *
 *	description:	method to execute "GetMicrocodeRevision"
 *	returns the micro-code revision as a string,
 *	generic micro-code revision + specific micro-code revision if any
 *
 * @return	the microcode revision 
 *
 */
//+------------------------------------------------------------------
Tango::DevString ControlBox::get_microcode_revision()
{
	DEBUG_STREAM << "ControlBox::get_microcode_revision(): entering... !" << endl;

  this->check_init();
  
  std::string ucv;
  
  try
  {
    ucv = GALIL_BOX->ucode_version();
  }
  catch (Tango::DevFailed & df)
  {
    ERROR_STREAM << df << std::endl;
    throw;
  }
  catch (...)
  {
    ERROR_STREAM << "unknown exception caught from Box::ucode_version" << std::endl;
    THROW_DEVFAILED(_CPTC("UNKNOWN_ERROR"),
                    _CPTC("unknown exception caught from Box::ucode_version"),
                    _CPTC("ControlBox::get_microcode_revision"));
  }

  return CORBA::string_dup(ucv.c_str());
}

//+------------------------------------------------------------------
/**
 *	method:	ControlBox::get_firmware_revision
 *
 *	description:	method to execute "GetFirmwareRevision"
 *	returns the firmware revision as a string
 *
 * @return	the firmware revision 
 *
 */
//+------------------------------------------------------------------
Tango::DevString ControlBox::get_firmware_revision()
{
	DEBUG_STREAM << "ControlBox::get_firmware_revision(): entering... !" << endl;

  this->check_init();
  
  std::string fr;
  
  try
  {
    fr = GALIL_BOX->firmware_version();
  }
  catch (Tango::DevFailed & df)
  {
    ERROR_STREAM << df << std::endl;
    throw;
  }
  catch (...)
  {
    ERROR_STREAM << "unknown exception caught from Box::firmware_version" << std::endl;
    THROW_DEVFAILED(_CPTC("UNKNOWN_ERROR"),
                    _CPTC("unknown exception caught from Box::firmware_version"),
                    _CPTC("ControlBox::get_firmware_revision"));
  }
  
  return CORBA::string_dup(fr.c_str());
}

//+------------------------------------------------------------------
/**
 *	method:	ControlBox::exec_low_level_cmd
 *
 *	description:	method to execute "ExecLowLevelCmd"
 *	Executes a low level (or expert command) on the controller then returns the reply.
 *
 * @param	argin	the cmd to execute
 * @return	the cmd reply
 *
 */
//+------------------------------------------------------------------
Tango::DevString ControlBox::exec_low_level_cmd(Tango::DevString argin)
{
	DEBUG_STREAM << "ControlBox::exec_low_level_cmd(): entering... !" << endl;

  this->check_init();
  
  std::string ans;
  
  try
  {
    ans = GALIL_BOX->exec_low_level_cmd(std::string(argin));
  }
  catch (Tango::DevFailed & df)
  {
    ERROR_STREAM << df << std::endl;
    throw;
  }
  catch (...)
  {
    ERROR_STREAM << "unknown exception caught from Box::exec_low_level_cmd" << std::endl;
    THROW_DEVFAILED(_CPTC("UNKNOWN_ERROR"),
                    _CPTC("unknown exception caught from Box::exec_low_level_cmd"),
                    _CPTC("ControlBox::exec_low_level_cmd"));
  }

  return CORBA::string_dup(ans.c_str());
}

}	//	namespace
