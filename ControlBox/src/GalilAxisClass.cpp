static const char *ClassId    = "$Id: GalilAxisClass.cpp,v 1.21 2011/07/15 09:47:42 buteau Exp $";
static const char *CvsPath    = "$Source: /usr/local/CVS/DeviceServer/Generic/Motorisation/ControlBoxV2/src/GalilAxisClass.cpp,v $";
static const char *SvnPath    = "$HeadURL: $";
static const char *RcsId     = "$Header: /usr/local/CVS/DeviceServer/Generic/Motorisation/ControlBoxV2/src/GalilAxisClass.cpp,v 1.21 2011/07/15 09:47:42 buteau Exp $";
static const char *TagName   = "$Name: release_2_5_4 $";
static const char *HttpServer= "http://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/";
//+=============================================================================
//
// file :        GalilAxisClass.cpp
//
// description : C++ source for the GalilAxisClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the GalilAxis once per process.
//
// project :     TANGO Device Server
//
// $Author: buteau $
//
// $Revision: 1.21 $
//
// $Log: GalilAxisClass.cpp,v $
// Revision 1.21  2011/07/15 09:47:42  buteau
// MANTIS 19368
//
// Revision 1.19  2011/01/03 09:48:11  coquet
// added property AxisInitVelocity written on HW when cmd AxisInitializeReferencePosition is sent (in the same way as AxisInitPosition)
// To be tested with HW
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


#include <tango.h>

#include <GalilAxis.h>
#include <GalilAxisClass.h>


namespace GalilAxis_ns
{
//+----------------------------------------------------------------------------
//
// method : 		GetDetailOfStateCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetDetailOfStateCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetDetailOfStateCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	return insert((static_cast<GalilAxis *>(device))->get_detail_of_state(argin));
}


//+----------------------------------------------------------------------------
//
// method : 		OffClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *OffClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "OffClass::execute(): arrived" << endl;

	((static_cast<GalilAxis *>(device))->off());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		OnClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *OnClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "OnClass::execute(): arrived" << endl;

	((static_cast<GalilAxis *>(device))->on());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		ComputeNewOffsetClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ComputeNewOffsetClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ComputeNewOffsetClass::execute(): arrived" << endl;

	Tango::DevDouble	argin;
	extract(in_any, argin);

	((static_cast<GalilAxis *>(device))->compute_new_offset(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		DefinePositionCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DefinePositionCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DefinePositionCmd::execute(): arrived" << endl;

	Tango::DevDouble	argin;
	extract(in_any, argin);

	((static_cast<GalilAxis *>(device))->define_position(argin));
	return new CORBA::Any();
}


//+----------------------------------------------------------------------------
//
// method : 		ForwardCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ForwardCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ForwardCmd::execute(): arrived" << endl;

	((static_cast<GalilAxis *>(device))->forward());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		StopCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *StopCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "StopCmd::execute(): arrived" << endl;

	((static_cast<GalilAxis *>(device))->stop());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		BackwardCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *BackwardCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "BackwardCmd::execute(): arrived" << endl;

	((static_cast<GalilAxis *>(device))->backward());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		InitializeReferencePositionCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *InitializeReferencePositionCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "InitializeReferencePositionCmd::execute(): arrived" << endl;

	((static_cast<GalilAxis *>(device))->initialize_reference_position());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		MotorOFFCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *MotorOFFCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "MotorOFFCmd::execute(): arrived" << endl;

	((static_cast<GalilAxis *>(device))->motor_off());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		MotorONCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *MotorONCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "MotorONCmd::execute(): arrived" << endl;

	((static_cast<GalilAxis *>(device))->motor_on());
	return new CORBA::Any();
}


//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
GalilAxisClass *GalilAxisClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		GalilAxisClass::GalilAxisClass(string &s)
// 
// description : 	constructor for the GalilAxisClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
GalilAxisClass::GalilAxisClass(string &s):DeviceClass(s)
{

	cout2 << "Entering GalilAxisClass constructor" << endl;
	set_default_property();
	write_class_property();
	get_class_property();
	
	cout2 << "Leaving GalilAxisClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		GalilAxisClass::~GalilAxisClass()
// 
// description : 	destructor for the GalilAxisClass
//
//-----------------------------------------------------------------------------
GalilAxisClass::~GalilAxisClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		GalilAxisClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
GalilAxisClass *GalilAxisClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new GalilAxisClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

GalilAxisClass *GalilAxisClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		GalilAxisClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void GalilAxisClass::command_factory()
{
	command_list.push_back(new ForwardCmd("Forward",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new StopCmd("Stop",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new BackwardCmd("Backward",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new InitializeReferencePositionCmd("InitializeReferencePosition",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::EXPERT));
	command_list.push_back(new MotorOFFCmd("MotorOFF",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::EXPERT));
	command_list.push_back(new MotorONCmd("MotorON",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::EXPERT));
	command_list.push_back(new DefinePositionCmd("DefinePosition",
		Tango::DEV_DOUBLE, Tango::DEV_VOID,
		"initialisation position in encoder units",
		"",
		Tango::OPERATOR));
	command_list.push_back(new ComputeNewOffsetClass("ComputeNewOffset",
		Tango::DEV_DOUBLE, Tango::DEV_VOID,
		"the position you want to have here and now",
		"",
		Tango::OPERATOR));
	command_list.push_back(new OnClass("On",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new OffClass("Off",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetDetailOfStateCmd("GetDetailOfState",
		Tango::DEV_LONG, Tango::DEV_BOOLEAN,
		"detail : [1=Axis positionning failed|2=Axis not initialised]",
		"bool value related to Argin",
		Tango::EXPERT));

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		GalilAxisClass::get_class_property
// 
// description : 	Get the class property for specified name.
//
// in :		string	name : The property name
//
//+----------------------------------------------------------------------------
Tango::DbDatum GalilAxisClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		GalilAxisClass::get_default_device_property()
// 
// description : 	Return the default value for device property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum GalilAxisClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//+----------------------------------------------------------------------------
//
// method : 		GalilAxisClass::get_default_class_property()
// 
// description : 	Return the default value for class property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum GalilAxisClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		GalilAxisClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void GalilAxisClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	//	Create all devices.(Automatic code generation)
	//-------------------------------------------------------------
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create devices and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new GalilAxis(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before if database used.
		//---------------------------------------------
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
	//	End of Automatic code generation
	//-------------------------------------------------------------

}
//+----------------------------------------------------------------------------
//	Method: GalilAxisClass::attribute_factory(vector<Tango::Attr *> &att_list)
//-----------------------------------------------------------------------------
void GalilAxisClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	//	Attribute : acceleration
	accelerationAttrib	*acceleration = new accelerationAttrib();
	Tango::UserDefaultAttrProp	acceleration_prop;
	acceleration_prop.set_label("Acceleration");
	acceleration_prop.set_unit("UU/s^2");
	acceleration_prop.set_standard_unit("UU/s^2");
	acceleration_prop.set_display_unit("UU/s^2");
	acceleration_prop.set_format("%8.2f");
	acceleration_prop.set_description("Acceleration for all movements in user unit/sec^2");
	acceleration->set_default_properties(acceleration_prop);
	acceleration->set_disp_level(Tango::EXPERT);
	acceleration->set_memorized();
	acceleration->set_memorized_init(true);
	att_list.push_back(acceleration);

	//	Attribute : accuracy
	accuracyAttrib	*accuracy = new accuracyAttrib();
	Tango::UserDefaultAttrProp	accuracy_prop;
	accuracy_prop.set_label("Motion Accuracy");
	accuracy_prop.set_unit("UU");
	accuracy_prop.set_standard_unit("UU");
	accuracy_prop.set_display_unit("UU");
	accuracy_prop.set_format("%8.2f");
	accuracy_prop.set_description("Accuracy of a movement:\ne.g: AxisMotionAccuracy=13; \nAxisCurrentPosition= 150 \nif AxisGoToPosition(160): No move because:\n160 - 150 < 13");
	accuracy->set_default_properties(accuracy_prop);
	accuracy->set_disp_level(Tango::EXPERT);
	accuracy->set_memorized();
	accuracy->set_memorized_init(true);
	att_list.push_back(accuracy);

	//	Attribute : backlash
	backlashAttrib	*backlash = new backlashAttrib();
	Tango::UserDefaultAttrProp	backlash_prop;
	backlash_prop.set_label("Backlash");
	backlash_prop.set_unit("UU");
	backlash_prop.set_standard_unit("UU");
	backlash_prop.set_display_unit("UU");
	backlash_prop.set_format("%8.2f");
	backlash_prop.set_description("Compensation for mechanical backlash by doing final move in the direction defined by sign of backlash");
	backlash->set_default_properties(backlash_prop);
	backlash->set_disp_level(Tango::EXPERT);
	backlash->set_memorized();
	backlash->set_memorized_init(true);
	att_list.push_back(backlash);

	//	Attribute : backwardLimitSwitch
	backwardLimitSwitchAttrib	*backward_limit_switch = new backwardLimitSwitchAttrib();
	Tango::UserDefaultAttrProp	backward_limit_switch_prop;
	backward_limit_switch_prop.set_label("Backward Limit Switch");
	backward_limit_switch_prop.set_description("Backward limit switch state");
	backward_limit_switch->set_default_properties(backward_limit_switch_prop);
	att_list.push_back(backward_limit_switch);

	//	Attribute : deceleration
	decelerationAttrib	*deceleration = new decelerationAttrib();
	Tango::UserDefaultAttrProp	deceleration_prop;
	deceleration_prop.set_label("Deceleration");
	deceleration_prop.set_unit("UU/s^2");
	deceleration_prop.set_standard_unit("UU/s^2");
	deceleration_prop.set_display_unit("UU/s^2");
	deceleration_prop.set_format("%8.2f");
	deceleration_prop.set_description("Deceleration for all movements in UserUnits /sec^2");
	deceleration->set_default_properties(deceleration_prop);
	deceleration->set_disp_level(Tango::EXPERT);
	deceleration->set_memorized();
	deceleration->set_memorized_init(true);
	att_list.push_back(deceleration);

	//	Attribute : forwardLimitSwitch
	forwardLimitSwitchAttrib	*forward_limit_switch = new forwardLimitSwitchAttrib();
	Tango::UserDefaultAttrProp	forward_limit_switch_prop;
	forward_limit_switch_prop.set_label("Forward Limit Switch");
	forward_limit_switch_prop.set_description("Forward limit switch state");
	forward_limit_switch->set_default_properties(forward_limit_switch_prop);
	att_list.push_back(forward_limit_switch);

	//	Attribute : offset
	offsetAttrib	*offset = new offsetAttrib();
	Tango::UserDefaultAttrProp	offset_prop;
	offset_prop.set_label("Offset");
	offset_prop.set_unit("UU");
	offset_prop.set_standard_unit("UU");
	offset_prop.set_format("%8.2f");
	offset_prop.set_description("adds an Offset in user units to AxisCurrentPosition\nLets unchanged AxisCurrentEncoderPosition\nand AxisCurrentMotorPosition\nOffset in user unit  added to the value read on hardware \nDefault : 0\n");
	offset->set_default_properties(offset_prop);
	offset->set_disp_level(Tango::EXPERT);
	offset->set_memorized();
	offset->set_memorized_init(true);
	att_list.push_back(offset);

	//	Attribute : position
	positionAttrib	*position = new positionAttrib();
	Tango::UserDefaultAttrProp	position_prop;
	position_prop.set_label("Current position ");
	position_prop.set_unit("UU");
	position_prop.set_standard_unit("UU");
	position_prop.set_display_unit("UU");
	position_prop.set_format("%8.2f");
	position_prop.set_description("read : position of Axis in UserUnit (UU)\nwrite : setpoint, absolute position to reach");
	position->set_default_properties(position_prop);
	att_list.push_back(position);

	//	Attribute : positionLocked
	positionLockedAttrib	*position_locked = new positionLockedAttrib();
	Tango::UserDefaultAttrProp	position_locked_prop;
	position_locked_prop.set_label("Axis Position Locked");
	position_locked_prop.set_unit("n/a");
	position_locked_prop.set_standard_unit("n/a");
	position_locked_prop.set_display_unit("n/a");
	position_locked_prop.set_format("%d");
	position_locked_prop.set_description("Axis position locking mechanism status.  ");
	position_locked->set_default_properties(position_locked_prop);
	att_list.push_back(position_locked);

	//	Attribute : velocity
	velocityAttrib	*velocity = new velocityAttrib();
	Tango::UserDefaultAttrProp	velocity_prop;
	velocity_prop.set_label("Velocity");
	velocity_prop.set_unit("UU/s");
	velocity_prop.set_standard_unit("UU/s");
	velocity_prop.set_display_unit("UU/s");
	velocity_prop.set_format("%8.2f");
	velocity_prop.set_description("Velocity for all movements in UserUnits/sec");
	velocity->set_default_properties(velocity_prop);
	velocity->set_disp_level(Tango::EXPERT);
	velocity->set_memorized();
	velocity->set_memorized_init(true);
	att_list.push_back(velocity);

	//	Attribute : lockedPositionHistory
	lockedPositionHistoryAttrib	*locked_position_history = new lockedPositionHistoryAttrib();
	att_list.push_back(locked_position_history);

	//	End of Automatic code generation
	//-------------------------------------------------------------
}

//+----------------------------------------------------------------------------
//
// method : 		GalilAxisClass::get_class_property()
// 
// description : 	Read the class properties from database.
//
//-----------------------------------------------------------------------------
void GalilAxisClass::get_class_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read class properties from database.(Automatic code generation)
	//------------------------------------------------------------------

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;


	//	End of Automatic code generation
	//------------------------------------------------------------------

}

//+----------------------------------------------------------------------------
//
// method : 	GalilAxisClass::set_default_property
// 
// description: Set default property (class and device) for wizard.
//              For each property, add to wizard property name and description
//              If default value has been set, add it to wizard property and
//              store it in a DbDatum.
//
//-----------------------------------------------------------------------------
void GalilAxisClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;

	vector<string>	vect_data;
	//	Set Default Class Properties
	//	Set Default Device Properties
	prop_name = "AxisNumber";
	prop_desc = "Axis identifier on the motion controller. This number must be in [0..7] or [ A ..H].\nThis critical property does not have any default value and must be specified.";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "AxisPositionRatio";
	prop_desc = "Property used to define the conversion from <I>encoder</I> to <I>user</I> units<BR>\naccording to the following formula: <BR>\n<B> AxisPosition (<I> in UserUnits </I>) = AxisEncoderPosition * PositionRatio + Offset\n</B>\n<BR>\nDefaults to 1.0.\n";
	prop_def  = "1.0";
	vect_data.clear();
	vect_data.push_back("1.0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "AxisEncoderType";
	prop_desc = "The type of the encoder associated with this axis\n<UL>\n<LI> 0: for no encoder </LI>\n<LI> 1: for incremental encoder </LI>\n<LI> 2: for absolute encoder </LI>\n</UL>\nThis critical property has no default value.";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "AxisInitType";
	prop_desc = "Type of initialization process. form : LSBWD:2;LSFWD:1;FH:-3;FI:2;DP;\n<UL>\n<LI> LSBWD: 2  : goes 2 times on limit switch backward, decreasing speed each time\n<LI> LSFWD: 15 : goes 15 times on limit switch forward, decreasing speed each time\n<LI> FH   : -3 : goes 3 times on Home switch, decreasing speed eeach time, begining negative direction\n<LI> FI   : 2  : goes 2 times on Index of encoder, decreasing speed each time, begining positive direction\n<LI> DP        : does nothing, use DefinePosition(position) to initialize position\n</UL>\ndefault : 0";
	prop_def  = "DP;";
	vect_data.clear();
	vect_data.push_back("DP;");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "AxisInitPosition";
	prop_desc = "This will be the axis position (in encoder units) after execution of the InitializeReferencePoisition command.\nDefaults to 0.";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "EnableMaintenanceMode";
	prop_desc = "enables the maintenance position mode : a closed loop functionality for steppers\nsee micro-code documentation for mode and limitations\n\nEnableMaintenanceMode :\nMoteurs steppers avec codeurs uniquement.\nValide la surveillance dynamique de l'erreur de trajectoire\nValeur par d�faut : false (inhib�)\nOnly for stepper motors with Encoders\nWhen true enables the dynamic monitoring of a following error\ndefault value : false (disabled)";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "AllowRemoteCbox";
	prop_desc = "allows the Remote Cbox ( t�lecommande manuelle) to work if true\ninhibits the RemoteCBox functionnality when false,\nif Inputs/outputs are used for another application for example.";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "EnableDutyCycle";
	prop_desc = "Enables the 'duty cycle' support";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Percent";
	prop_desc = "Doc. to be written by ECA - valid range is [?, ?] - defaults to 1.0";
	prop_def  = "1.0";
	vect_data.clear();
	vect_data.push_back("1.0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Retry";
	prop_desc = "Doc. to be written by ECA - valid range is [?, ?] - defaults to 5";
	prop_def  = "5";
	vect_data.clear();
	vect_data.push_back("5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "DisabledCmds";
	prop_desc = "List of disabled commands";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "EnableErrorCorrection";
	prop_desc = "EnableErrorCorrection :\nMoteurs steppers avec codeurs uniquement.\nValide la correction dynamique de trajectoire\nValeur par d�faut : false (inhib�)\nOnly for Stepper motors with encoders\nWhen true, enables the dynamic following error correction\nDefault : false (disabled)";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "SettlingTime";
	prop_desc = "stabilization time for the motor.\nThe motor is still in MOVING state  SettlingTime after move\nsettling time is performed in the micro-code in the controlbox\nUnit : milli-seconds\ndefault value : 100\nThis property is not automatically created by code.";
	prop_def  = "100";
	vect_data.clear();
	vect_data.push_back("100");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "LockedPositionHistoryDepth";
	prop_desc = "The <lock position> history depth. Defaults to 1024.";
	prop_def  = "1024";
	vect_data.clear();
	vect_data.push_back("1024");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "LockedPositionConstraint";
	prop_desc = "Position derivation threshold of the \"position locking\" mechanism.\nThis is the difference threshold -  between locked-pos and current-pos. - above which a <correction> is applied.\nThis property must be expressed in <UserUnit> (i.e. same unit as the associated axis position).\nDefaults to 1000.";
	prop_def  = "1000";
	vect_data.clear();
	vect_data.push_back("1000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "LockedPositionCheckingPeriodSecs";
	prop_desc = "The checking period (in seconds) of the position locking mechanism.\nDefaults to 1.";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "LockedPositionAveragingWindowWidth";
	prop_desc = "Width of the locked position averaging window (in number of samples).\nA sample is obtained every <LockedPositionCheckingPeriodSecs> seconds.\nDefaults to 10.";
	prop_def  = "10";
	vect_data.clear();
	vect_data.push_back("10");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "AxisInitVelocity";
	prop_desc = "Axis Initialization initial velocity\ninitial velocity for InitializeReferencePosition (Homing)\nin user units\nif = 0 : current velocity is used\ndefault : 0 \n";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

}
//+----------------------------------------------------------------------------
//
// method : 		GalilAxisClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void GalilAxisClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Axis");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("  ");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs or svn location
	string	filename(classname);
	filename += "Class.cpp";
	
	// Create a string with the class ID to
	// get the string into the binary
	string	class_id(ClassId);
	
	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}
	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("Device_4Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

}	// namespace
