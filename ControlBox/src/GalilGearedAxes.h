//=============================================================================
//
// file :        GalilGearedAxes.h
//
// description : Include for the GalilGearedAxes class.
//
// project :	GalilGearedAxes
//
// $Author: buteau $
//
// $Revision: 1.4 $
//
// $Log: GalilGearedAxes.h,v $
// Revision 1.4  2011/07/15 09:47:43  buteau
// MANTIS 19368
//
// Revision 1.2  2010/03/25 18:10:22  maven
// "Migration_Tango7"
//
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _GalilGearedAxes_H
#define _GalilGearedAxes_H

#include <tango.h>
#include "GearedAxes.h"

//using namespace Tango;

/**
 * @author	$Author: buteau $
 * @version	$Revision: 1.4 $
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------


namespace GalilGearedAxes_ns
{

/**
 * Class Description:
 * handles 2 motors in geared mode
 *	slave motor follows the master with a  ratio fixed by property Ratio
 */

/*
 *	Device States Description:
*  Tango::MOVING :   performing movement
 *                    bans any movement request on the axis moving
*  Tango::STANDBY :  slit is idle accepting requests
*  Tango::FAULT :    Axis fault no movement permitted
*  Tango::ALARM :    non blocking default on the axis e.g. limit switch
*  Tango::OFF :      no communication with hardware
 */


class GalilGearedAxes: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevDouble	*attr_masterPosition_read;
		Tango::DevDouble	attr_masterPosition_write;
		Tango::DevDouble	*attr_slavePosition_read;
		Tango::DevDouble	attr_slavePosition_write;
		Tango::DevBoolean	*attr_isGeared_read;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	letter of the master axis, from  A to H
 *	
 *	
 */
	string	masterAxis;
/**
 *	Letter of the slave axis, A to H
 *	
 *	
 */
	string	slaveAxis;
/**
 *	ratio between Master and Slave motors
 *	Slave speed = master speed * Ratio
 *	slave movement = master movement * Ratio
 */
	Tango::DevDouble	ratio;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	GalilGearedAxes(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	GalilGearedAxes(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	GalilGearedAxes(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
	~GalilGearedAxes() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name GalilGearedAxes methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for masterPosition acquisition result.
 */
	virtual void read_masterPosition(Tango::Attribute &attr);
/**
 *	Write masterPosition attribute values to hardware.
 */
	virtual void write_masterPosition(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for slavePosition acquisition result.
 */
	virtual void read_slavePosition(Tango::Attribute &attr);
/**
 *	Write slavePosition attribute values to hardware.
 */
	virtual void write_slavePosition(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for isGeared acquisition result.
 */
	virtual void read_isGeared(Tango::Attribute &attr);
/**
 *	Read/Write allowed for masterPosition attribute.
 */
	virtual bool is_masterPosition_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for slavePosition attribute.
 */
	virtual bool is_slavePosition_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for isGeared attribute.
 */
	virtual bool is_isGeared_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Stop command.
 */
	virtual bool is_Stop_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetIndependantMode command.
 */
	virtual bool is_SetIndependantMode_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetGearedMode command.
 */
	virtual bool is_SetGearedMode_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();
/**
 * This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *	@return	Status description
 *	@exception DevFailed
 */
	virtual Tango::ConstDevString	dev_status();
/**
 * stops any movement on the slit
 *	@exception DevFailed
 */
	void	stop();
/**
 * TURNS OFF THE GEARING MODE
 *	@exception DevFailed
 */
	void	set_independant_mode();
/**
 * turns ON the GEARING MODE
 *	@exception DevFailed
 */
	void	set_geared_mode();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------
private :
	bool m_init_device_done;
	bool m_properties_missing;
	std::string m_master_status;
	std::string m_slave_status;
	std::string m_status_str;

  std::string master_axis_letter;     // contains axis letter for Galil commands
  std::string slave_axis_letter;      // contains axis letter for Galil commands
  std::string command_concat;         // pour la manipulation de chaines de caracteres

  galil::GearedAxes * m_geared_axes;
};


}	// namespace_ns

#endif	// _GalilGearedAxes_H
