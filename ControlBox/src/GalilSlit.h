//=============================================================================
//
// file :        GalilSlit.h
//
// description : Include for the GalilSlit class.
//
// project :	GalilSlit
//
// $Author: buteau $
//
// $Revision: 1.13 $
//
// $Log: GalilSlit.h,v $
// Revision 1.13  2011/07/15 09:47:43  buteau
// MANTIS 19368
//
// Revision 1.12  2011/07/15 09:40:53  buteau
// MANTIS 19368
//
// Revision 1.11  2010/03/25 18:10:22  maven
// "Migration_Tango7"
//
// Revision 1.10  2010/02/09 12:59:27  coquet
// GalilSlit
// added commands ComputeGapOffset ComputePositionOffset
//
// Revision 1.9  2010/01/13 09:54:31  coquet
// added commands On Off to GalilSlit
//
// Revision 1.8  2008/10/20 13:24:47  coquet
// added property IsGapPosition to GalilSlit (support for Gap and Position type slits)
//
// Revision 1.7  2007/11/30 09:57:15  coquet
// added slit support :
// now supports independant moving (not geared moving) for better positionning accuracy for "bad mecanics" slits
// very minor change to CoupledAxes class (linux compilation warning correction)
//
// Revision 1.6  2007/10/12 14:24:36  coquet
// attributes positionOffset and gapOffset are now memorized / write on HW at init
// tested under W32
//
// Revision 1.5  2007/05/21 16:51:53  leclercq
// Switched from ADTB to YAT and YAT4TANGO
//
// Revision 1.4  2007/04/23 14:33:04  coquet
// bug correction : protection against write on attributes when slit is in MOVING state
//
// Revision 1.3  2007/04/19 08:26:24  coquet
// AxisRawDataReader :
// added 3 attributes
// * axisLetter
// * latchInput
// * homeInput
// GalilSSlit :
// * added tips in Status to come out of Limit switchs if necessary
// * added boolean property InvertPositionDirection to allow user to invert the positive direction if necessary
// GalilAxis :
// * attribute position is in ALARM if positionning failed
// * internal "EncoderMotorRatio" is set to 1.0 when motor is servo (according to bit 0 of Stat[x])  or if stepper motor has no encoder.
//
// Revision 1.2  2007/03/16 14:44:30  coquet
// changed include file name from inline.h to Inline.h
//
// Revision 1.1  2007/01/31 13:14:33  leclercq
// Added more Slit support
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _GALILSLIT_H
#define _GALILSLIT_H

#include <tango.h>
#include "AbstractSlit.h"
#include "GearedSlit.h"
#include "IndependantSlit.h"
#include "GapPositionSlit.h"

//using namespace Tango;

/**
 * @author	$Author: buteau $
 * @version	$Revision: 1.13 $
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------


namespace GalilSlit_ns
{

/**
 * Class Description:
 * handles generic slits
 *	type independant blades
 *	type 1 motor for gap plus 1 motor for translation
 *	ETC
 */

/*
 *	Device States Description:
*  Tango::MOVING :   performing movement
 *                    bans any movement request on the axis moving
*  Tango::STANDBY :  slit is idle accepting requests
*  Tango::FAULT :    Axis fault no movement permitted
*  Tango::ALARM :    non blocking default on the axis e.g. limit switch
*  Tango::OFF :      no communication with hardware
 */


class GalilSlit: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevDouble	*attr_gap_read;
		Tango::DevDouble	attr_gap_write;
		Tango::DevDouble	*attr_position_read;
		Tango::DevDouble	attr_position_write;
		Tango::DevDouble	*attr_insideUpPosition_read;
		Tango::DevDouble	attr_insideUpPosition_write;
		Tango::DevDouble	*attr_outsideDownPosition_read;
		Tango::DevDouble	attr_outsideDownPosition_write;
		Tango::DevDouble	*attr_positionOffset_read;
		Tango::DevDouble	attr_positionOffset_write;
		Tango::DevDouble	*attr_gapOffset_read;
		Tango::DevDouble	attr_gapOffset_write;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	letter of the Inside ( Up ) axis, from  A to H
 *	This axis is the master axis
 *	
 */
	string	insideUpAxis;
/**
 *	Outside ( Down ) axis of the slit, A to H
 *	This axis is the slave axis
 *	
 */
	string	outsideDownAxis;
/**
 *	use this property to invert the default direction of position of the slit
 *	true : the position is inverted :
 *	e.g. standard position of -3mm will be displayed as +3mm
 *	positive direction of position of a vertical slit will be up rather than down
 *	
 *	
 */
	Tango::DevBoolean	invertPositionDirection;
/**
 *	set to true if you want to run your Slit as Geared Master/Slave
 *	the Slave blage follows tigthly ( same speed, etc...) the master blade
 *	You can change a position with constant gap, change of gap and keep position at the same place
 *	on the other hand blade positions can derivate when mechanics is not correct
 *	(ther is no position correction on the slave
 *	
 *	set to false, Slit is run as 2 separate motors without gearing.
 *	Positions are corrected on both axes, so gap and position are more accurate
 *	The speeds can be different on the 2 axes.
 *	It is possible to control motors through their own devices while the Slit device is running
 *	(no gear -> no DISABLE state)
 *	
 */
	Tango::DevBoolean	isGeared;
/**
 *	set it to true if your slit has 1 motor for gap / 1 motor for position
 *	if true IsGeared has no effect
 */
	Tango::DevBoolean	isGapPosition;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	GalilSlit(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	GalilSlit(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	GalilSlit(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
	~GalilSlit() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name GalilSlit methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for gap acquisition result.
 */
	virtual void read_gap(Tango::Attribute &attr);
/**
 *	Write gap attribute values to hardware.
 */
	virtual void write_gap(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for position acquisition result.
 */
	virtual void read_position(Tango::Attribute &attr);
/**
 *	Write position attribute values to hardware.
 */
	virtual void write_position(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for insideUpPosition acquisition result.
 */
	virtual void read_insideUpPosition(Tango::Attribute &attr);
/**
 *	Write insideUpPosition attribute values to hardware.
 */
	virtual void write_insideUpPosition(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for outsideDownPosition acquisition result.
 */
	virtual void read_outsideDownPosition(Tango::Attribute &attr);
/**
 *	Write outsideDownPosition attribute values to hardware.
 */
	virtual void write_outsideDownPosition(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for positionOffset acquisition result.
 */
	virtual void read_positionOffset(Tango::Attribute &attr);
/**
 *	Write positionOffset attribute values to hardware.
 */
	virtual void write_positionOffset(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for gapOffset acquisition result.
 */
	virtual void read_gapOffset(Tango::Attribute &attr);
/**
 *	Write gapOffset attribute values to hardware.
 */
	virtual void write_gapOffset(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for gap attribute.
 */
	virtual bool is_gap_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for position attribute.
 */
	virtual bool is_position_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for insideUpPosition attribute.
 */
	virtual bool is_insideUpPosition_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for outsideDownPosition attribute.
 */
	virtual bool is_outsideDownPosition_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for positionOffset attribute.
 */
	virtual bool is_positionOffset_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for gapOffset attribute.
 */
	virtual bool is_gapOffset_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Stop command.
 */
	virtual bool is_Stop_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetIndependantMode command.
 */
	virtual bool is_SetIndependantMode_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Off command.
 */
	virtual bool is_Off_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for On command.
 */
	virtual bool is_On_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ComputeNewGapOffset command.
 */
	virtual bool is_ComputeNewGapOffset_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ComputeNewPositionOffset command.
 */
	virtual bool is_ComputeNewPositionOffset_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();
/**
 * This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *	@return	Status description
 *	@exception DevFailed
 */
	virtual Tango::ConstDevString	dev_status();
/**
 * stops any movement on the slit
 *	@exception DevFailed
 */
	void	stop();
/**
 * For slits with independant motorized blades,allow motors to move independantly.
 *	To be called before moving motors with their respective GalilAxis Device Servers
 *	@exception DevFailed
 */
	void	set_independant_mode();
/**
 * turns Off the 2 motors of the slit if allowed (not running,... same conditions as GalilAxis)
 *	@exception DevFailed
 */
	void	off();
/**
 * turns On the 2 motors if allowed (same conditions as GalilAxis)
 *	@exception DevFailed
 */
	void	on();
/**
 * computes and sets the gap offset as you want to see it here and now
 *	eg you have a gap = 10 and offset = 0
 *	you want it to be 9
 *	it will set the gapOffset to -1 and you will see gap = 9
 *	acts only on gapOffset
 *	does not modify motors offsets
 *	
 *	
 *	
 *	@param	argin	the gap you want to have here and now
 *	@exception DevFailed
 */
	void	compute_new_gap_offset(Tango::DevDouble);
/**
 * computes and sets the position offset as you want to see it here and now
 *	eg you have a position = 10 and offset = 0
 *	you want it to be 9
 *	it will set the positionOffset to -1 and you will see position = 9
 *	acts only on positionOffset
 *	does not modify motors offsets
 *	
 *	
 *	
 *	@param	argin	the position you want to have here and now
 *	@exception DevFailed
 */
	void	compute_new_position_offset(Tango::DevDouble);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------
private :
	bool m_init_device_done;
	bool m_properties_missing;
	std::string m_master_status;
	std::string m_slave_status;
	std::string m_status_str;

  std::string master_axis_letter;     // contains axis letter for Galil commands
  std::string slave_axis_letter;      // contains axis letter for Galil commands
  std::string command_concat;         // pour la manipulation de chaines de caracteres

  galil::AbstractSlit * m_slit;
};


}	// namespace_ns

#endif	// _GALILSLIT_H
