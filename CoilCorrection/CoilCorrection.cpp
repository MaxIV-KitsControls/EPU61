/*----- PROTECTED REGION ID(CoilCorrection.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        CoilCorrection.cpp
//
// description : C++ source for the CoilCorrection and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               CoilCorrection are implemented in this file.
//
// project :     .
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <CoilCorrection.h>
#include <CoilCorrectionClass.h>

#include <PollerThread.h>



/*----- PROTECTED REGION END -----*/


/**
 *	CoilCorrection class description:
 *	
 */

//================================================================
//
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//----------------------------------------------------------------
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  On            |  on
//  Off           |  off
//  Load          |  load
//  Run           |  run
//================================================================

namespace CoilCorrection_ns
{
	/*----- PROTECTED REGION ID(CoilCorrection::namespace_starting) ENABLED START -----*/


	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::namespace_starting



//--------------------------------------------------------
/**
 *	Method      : CoilCorrection::CoilCorrection()
 *	Description : Constructors for a Tango device
 *	              implementing the class CoilCorrection
 */
//--------------------------------------------------------
CoilCorrection::CoilCorrection(Tango::DeviceClass *cl, string &s)
 	: Tango::Device_4Impl(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(CoilCorrection::constructor_1) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::constructor_1
}
//--------------------------------------------------------
CoilCorrection::CoilCorrection(Tango::DeviceClass *cl, const char *s)
 	: Tango::Device_4Impl(cl, s)
{
	/*----- PROTECTED REGION ID(CoilCorrection::constructor_2) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::constructor_2
}
//--------------------------------------------------------
CoilCorrection::CoilCorrection(Tango::DeviceClass *cl, const char *s, const char *d)
 	: Tango::Device_4Impl(cl, s, d)
{
	/*----- PROTECTED REGION ID(CoilCorrection::constructor_3) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::constructor_3
}


//--------------------------------------------------------
/**
 *	Method      : CoilCorrection::delete_device()()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void CoilCorrection::delete_device()
{
	/*----- PROTECTED REGION ID(CoilCorrection::delete_device) ENABLED START -----*/
	pollerThread->abort();
	pollerThread->join(0);
	pollerThread = 0;

	supplies.reset(0);

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::delete_device
	delete[] attr_Coil1Readback_read;
	delete[] attr_Coil2Readback_read;
	delete[] attr_Coil3Readback_read;
	delete[] attr_Coil4Readback_read;
	delete[] attr_Coil1Setpoint_read;
	delete[] attr_Coil2Setpoint_read;
	delete[] attr_Coil3Setpoint_read;
	delete[] attr_Coil4Setpoint_read;
	
}


//--------------------------------------------------------
/**
 *	Method      : CoilCorrection::init_device()
 *	Description : //	will be called at device initialization.
 */
//--------------------------------------------------------
void CoilCorrection::init_device()
{
	DEBUG_STREAM << "CoilCorrection::init_device() create device " << device_name << endl;

	/*----- PROTECTED REGION ID(CoilCorrection::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::init_device_before
	
	//	Get the device properties (if any) from database
	get_device_property();
	
	attr_Coil1Readback_read = new Tango::DevDouble[1];
	attr_Coil2Readback_read = new Tango::DevDouble[1];
	attr_Coil3Readback_read = new Tango::DevDouble[1];
	attr_Coil4Readback_read = new Tango::DevDouble[1];
	attr_Coil1Setpoint_read = new Tango::DevDouble[1];
	attr_Coil2Setpoint_read = new Tango::DevDouble[1];
	attr_Coil3Setpoint_read = new Tango::DevDouble[1];
	attr_Coil4Setpoint_read = new Tango::DevDouble[1];
	
	/*----- PROTECTED REGION ID(CoilCorrection::init_device) ENABLED START -----*/

	// Set everything to zero.
	*attr_Coil1Readback_read=*attr_Coil2Readback_read=*attr_Coil3Readback_read=
	*attr_Coil4Readback_read=*attr_Coil1Setpoint_read=*attr_Coil2Setpoint_read=
	*attr_Coil3Setpoint_read=*attr_Coil4Setpoint_read=0;

	supplies.reset(new PowerSupply[4]);

	// Try to load the interpolation data table from the provided DataFile property
	bool loadOk=true;
	try {
		load(const_cast<char*>(dataFile.c_str()));
	} catch (...)
	{
		loadOk=false;
	}

	pollerThread = new PollerThread(*this, controlBoxGap,controlBoxPhase);
	pollerThread->go();

	// If the data was loaded OK, put in RUN state, otherwise OFF
	if (loadOk)
		run();
	else
		set_state(Tango::OFF);

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::init_device
}



//--------------------------------------------------------
/**
 *	Method      : CoilCorrection::get_device_property()
 *	Description : //	Add your own code to initialize
 */
//--------------------------------------------------------
void CoilCorrection::get_device_property()
{
	/*----- PROTECTED REGION ID(CoilCorrection::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("ControlBoxGap"));
	dev_prop.push_back(Tango::DbDatum("ControlBoxPhase"));
	dev_prop.push_back(Tango::DbDatum("DataFile"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on CoilCorrectionClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		CoilCorrectionClass	*ds_class =
			(static_cast<CoilCorrectionClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize ControlBoxGap from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  controlBoxGap;
		else {
			//	Try to initialize ControlBoxGap from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  controlBoxGap;
		}
		//	And try to extract ControlBoxGap value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  controlBoxGap;

		//	Try to initialize ControlBoxPhase from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  controlBoxPhase;
		else {
			//	Try to initialize ControlBoxPhase from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  controlBoxPhase;
		}
		//	And try to extract ControlBoxPhase value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  controlBoxPhase;

		//	Try to initialize DataFile from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  dataFile;
		else {
			//	Try to initialize DataFile from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  dataFile;
		}
		//	And try to extract DataFile value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dataFile;


	}
	/*----- PROTECTED REGION ID(CoilCorrection::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::get_device_property_after

}

//--------------------------------------------------------
/**
 *	Method      : CoilCorrection::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void CoilCorrection::always_executed_hook()
{
	INFO_STREAM << "CoilCorrection::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::always_executed_hook
}



//--------------------------------------------------------
/**
 *	Method      : CoilCorrection::read_attr_hardware()
 *	Description : Hardware acquisition for attributes.
 */
//--------------------------------------------------------
void CoilCorrection::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "CoilCorrection::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::read_attr_hardware

}


//--------------------------------------------------------
/**
 *	Read Coil1Readback attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void CoilCorrection::read_Coil1Readback(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CoilCorrection::read_Coil1Readback(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::read_Coil1Readback) ENABLED START -----*/

	*attr_Coil1Readback_read = supplies[0].get_current();

	//	Set the attribute value
	attr.set_value(attr_Coil1Readback_read);


	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::read_Coil1Readback
}
//--------------------------------------------------------
/**
 *	Read Coil2Readback attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void CoilCorrection::read_Coil2Readback(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CoilCorrection::read_Coil2Readback(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::read_Coil2Readback) ENABLED START -----*/

	*attr_Coil2Readback_read = supplies[1].get_current();

	//	Set the attribute value
	attr.set_value(attr_Coil2Readback_read);


	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::read_Coil2Readback
}
//--------------------------------------------------------
/**
 *	Read Coil3Readback attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void CoilCorrection::read_Coil3Readback(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CoilCorrection::read_Coil3Readback(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::read_Coil3Readback) ENABLED START -----*/

	*attr_Coil3Readback_read = supplies[2].get_current();

	//	Set the attribute value
	attr.set_value(attr_Coil3Readback_read);


	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::read_Coil3Readback
}
//--------------------------------------------------------
/**
 *	Read Coil4Readback attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void CoilCorrection::read_Coil4Readback(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CoilCorrection::read_Coil4Readback(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::read_Coil4Readback) ENABLED START -----*/

	*attr_Coil4Readback_read = supplies[3].get_current();

	//	Set the attribute value
	attr.set_value(attr_Coil4Readback_read);


	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::read_Coil4Readback
}
//--------------------------------------------------------
/**
 *	Read Coil1Setpoint attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void CoilCorrection::read_Coil1Setpoint(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CoilCorrection::read_Coil1Setpoint(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::read_Coil1Setpoint) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Coil1Setpoint_read);


	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::read_Coil1Setpoint
}

//--------------------------------------------------------
/**
 *	Write Coil1Setpoint attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void CoilCorrection::write_Coil1Setpoint(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "CoilCorrection::write_Coil1Setpoint(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(CoilCorrection::write_Coil1Setpoint) ENABLED START -----*/

	*attr_Coil1Setpoint_read = w_val;
	supplies[0].set_current(w_val);

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::write_Coil1Setpoint
}

//--------------------------------------------------------
/**
 *	Read Coil2Setpoint attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void CoilCorrection::read_Coil2Setpoint(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CoilCorrection::read_Coil2Setpoint(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::read_Coil2Setpoint) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Coil2Setpoint_read);


	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::read_Coil2Setpoint
}

//--------------------------------------------------------
/**
 *	Write Coil2Setpoint attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void CoilCorrection::write_Coil2Setpoint(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "CoilCorrection::write_Coil2Setpoint(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(CoilCorrection::write_Coil2Setpoint) ENABLED START -----*/

	*attr_Coil2Setpoint_read = w_val;
	supplies[1].set_current(w_val);

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::write_Coil2Setpoint
}

//--------------------------------------------------------
/**
 *	Read Coil3Setpoint attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void CoilCorrection::read_Coil3Setpoint(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CoilCorrection::read_Coil3Setpoint(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::read_Coil3Setpoint) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Coil3Setpoint_read);


	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::read_Coil3Setpoint
}

//--------------------------------------------------------
/**
 *	Write Coil3Setpoint attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void CoilCorrection::write_Coil3Setpoint(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "CoilCorrection::write_Coil3Setpoint(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(CoilCorrection::write_Coil3Setpoint) ENABLED START -----*/

	*attr_Coil3Setpoint_read = w_val;
	supplies[2].set_current(w_val);

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::write_Coil3Setpoint
}

//--------------------------------------------------------
/**
 *	Read Coil4Setpoint attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void CoilCorrection::read_Coil4Setpoint(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CoilCorrection::read_Coil4Setpoint(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::read_Coil4Setpoint) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Coil4Setpoint_read);

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::read_Coil4Setpoint
}

//--------------------------------------------------------
/**
 *	Write Coil4Setpoint attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void CoilCorrection::write_Coil4Setpoint(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "CoilCorrection::write_Coil4Setpoint(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(CoilCorrection::write_Coil4Setpoint) ENABLED START -----*/

	*attr_Coil4Setpoint_read = w_val;
	supplies[3].set_current(w_val);

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::write_Coil4Setpoint
}


//--------------------------------------------------------
/**
 *	Method      : CoilCorrection::CoilCorrectionClass::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *	              for specified device.
 */
//--------------------------------------------------------
void CoilCorrection::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(CoilCorrection::Class::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::Class::add_dynamic_attributes

}



//========================================================
//	Command execution methods
//========================================================

//--------------------------------------------------------
/**
 *	Execute the On command:
 *	Description: Set the device in On state - manual operation
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
void CoilCorrection::on()
{
	DEBUG_STREAM << "CoilCorrection::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::on) ENABLED START -----*/

	// Turn off compensation. Function waits for the last compensation to process.
	pollerThread->set_compensate(false);

	for (int i=0;i<4;i++)
		supplies[i].on();

	set_state(Tango::ON);

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::on

}

//--------------------------------------------------------
/**
 *	Execute the Off command:
 *	Description: Turn off the device, all supplies turened off
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
void CoilCorrection::off()
{
	DEBUG_STREAM << "CoilCorrection::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::off) ENABLED START -----*/

	// Turn off compensation. Function waits for the last compensation to process.
	pollerThread->set_compensate(false);

	for (int i=0;i<4;i++)
		supplies[i].off();

	set_state(Tango::OFF);

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::off

}

//--------------------------------------------------------
/**
 *	Execute the Load command:
 *	Description: Loads the interpolation data from a file
 *
 *
 * 	Load can not be called while running. The data could be shared with the thread without locking.
 *
 *	@param argin fileName
 *	@returns 
 */
//--------------------------------------------------------
void CoilCorrection::load(Tango::DevString argin)
{
	DEBUG_STREAM << "CoilCorrection::Load()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::load) ENABLED START -----*/

	ifstream inFile(argin);

	if (!inFile.good())
		Tango::Except::throw_exception("Invalid filename provided.","The file-name in the argument could not be opened.",__PRETTY_FUNCTION__);

	int n = count(istreambuf_iterator<char>(inFile), istreambuf_iterator<char>(), '\n');
	if (n<=1)
		Tango::Except::throw_exception("The file does not contain any data.","",__PRETTY_FUNCTION__);

	data.clear();
	data.reserve(n);

	inFile.seekg(0,ios_base::beg);

	string line;
	// read the first header line
	std::getline(inFile,line);

	// Load the data
	DataItem item;
	while (true)
	{
		inFile >> item;
		if (!inFile.good()) break;

		cout << item;

		item.normalize();

		data.push_back(item);
	}


	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::load

}

//--------------------------------------------------------
/**
 *	Execute the Run command:
 *	Description: Start automatic correction
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
void CoilCorrection::run()
{
	DEBUG_STREAM << "CoilCorrection::Run()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CoilCorrection::run) ENABLED START -----*/

	// Turn on the power supplies
	for (int i=0;i<4;i++)
			supplies[i].on();

	// Turn on compensation
	pollerThread->set_compensate(true);
	set_state(Tango::RUNNING);

	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::run

}


	/*----- PROTECTED REGION ID(CoilCorrection::namespace_ending) ENABLED START -----*/

	//	Additional Methods
// //--------------------------------------------------------
// /**
//  *	Read Gap attribute
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar 
//  */
// //--------------------------------------------------------
// void CoilCorrection::read_Gap(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "CoilCorrection::read_Gap(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(&gap);
// }

// //--------------------------------------------------------
// /**
//  *	Read Taper attribute
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar 
//  */
// //--------------------------------------------------------
// void CoilCorrection::read_Taper(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "CoilCorrection::read_Taper(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(&taper);
// }

// //--------------------------------------------------------
// /**
//  *	Read Mode attribute
//  *	Description: 
//  *
//  *	Data type:	Tango::DevUShort
//  *	Attr type:	Scalar 
//  */
// //--------------------------------------------------------
// void CoilCorrection::read_Mode(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "CoilCorrection::read_Mode(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(&phase);
// }


	/*----- PROTECTED REGION END -----*/	//	CoilCorrection::namespace_ending
} //	namespace
