//=============================================================================
//
// file :         GalilGearedAxesClass.h
//
// description :  Include for the GalilGearedAxesClass root class.
//                This class is represents the singleton class for
//                the GalilGearedAxes device class.
//                It contains all properties and methods which the 
//                GalilGearedAxes requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author: buteau $
//
// $Revision: 1.3 $
//
// $Log: GalilGearedAxesClass.h,v $
// Revision 1.3  2011/07/15 09:47:43  buteau
// MANTIS 19368
//
// Revision 1.1  2008/05/28 12:06:27  coquet
// added GalilGearedAxes Tango Class to add suppport for geared axes with user ratio capability
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _GALILGEAREDAXESCLASS_H
#define _GALILGEAREDAXESCLASS_H

#include <tango.h>
#include <GalilGearedAxes.h>


namespace GalilGearedAxes_ns
{//=====================================
//	Define classes for attributes
//=====================================
class isGearedAttrib: public Tango::Attr
{
public:
	isGearedAttrib():Attr("isGeared", Tango::DEV_BOOLEAN, Tango::READ) {};
	~isGearedAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<GalilGearedAxes *>(dev))->read_isGeared(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<GalilGearedAxes *>(dev))->is_isGeared_allowed(ty);}
};

class slavePositionAttrib: public Tango::Attr
{
public:
	slavePositionAttrib():Attr("slavePosition", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~slavePositionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<GalilGearedAxes *>(dev))->read_slavePosition(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<GalilGearedAxes *>(dev))->write_slavePosition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<GalilGearedAxes *>(dev))->is_slavePosition_allowed(ty);}
};

class masterPositionAttrib: public Tango::Attr
{
public:
	masterPositionAttrib():Attr("masterPosition", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~masterPositionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<GalilGearedAxes *>(dev))->read_masterPosition(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<GalilGearedAxes *>(dev))->write_masterPosition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<GalilGearedAxes *>(dev))->is_masterPosition_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class SetGearedModeCmd : public Tango::Command
{
public:
	SetGearedModeCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetGearedModeCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetGearedModeCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GalilGearedAxes *>(dev))->is_SetGearedMode_allowed(any);}
};



class SetIndependantModeCmd : public Tango::Command
{
public:
	SetIndependantModeCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetIndependantModeCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetIndependantModeCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GalilGearedAxes *>(dev))->is_SetIndependantMode_allowed(any);}
};



class StopCmd : public Tango::Command
{
public:
	StopCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<GalilGearedAxes *>(dev))->is_Stop_allowed(any);}
};



//
// The GalilGearedAxesClass singleton definition
//

class GalilGearedAxesClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static GalilGearedAxesClass *init(const char *);
	static GalilGearedAxesClass *instance();
	~GalilGearedAxesClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	GalilGearedAxesClass(string &);
	static GalilGearedAxesClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace GalilGearedAxes_ns

#endif // _GALILGEAREDAXESCLASS_H
