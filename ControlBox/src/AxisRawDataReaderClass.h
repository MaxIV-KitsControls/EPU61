//=============================================================================
//
// file :         AxisRawDataReaderClass.h
//
// description :  Include for the AxisRawDataReaderClass root class.
//                This class is represents the singleton class for
//                the AxisRawDataReader device class.
//                It contains all properties and methods which the 
//                AxisRawDataReader requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author: buteau $
//
// $Revision: 1.9 $
//
// $Log: AxisRawDataReaderClass.h,v $
// Revision 1.9  2011/07/15 09:47:42  buteau
// MANTIS 19368
//
// Revision 1.8  2011/07/15 09:40:53  buteau
// MANTIS 19368
//
// Revision 1.7  2011/05/27 13:45:28  coquet
// added attribute positionError to AxisRawDataDeader
// TO BE TESTED
//
// Revision 1.6  2008/10/17 07:06:15  coquet
// added attribute velocity to AxosRawDataReader
// to be tested
//
// Revision 1.5  2007/06/04 12:28:57  coquet
// AxisRawDataReader :
// added latch encoder position support
// added 2 attributes
// latchIsArmed, RO, bool, reports that latch feature is ready to capture encoder position
// latchOccured reports that latch occured since last latch arming
// added 2 commands
// ArmLatch arms the latch feature
// ReportLatchedPosition returns the last lached position ( exception if latch did not occured)
//
// Revision 1.4  2007/04/19 14:04:08  coquet
// Axis::State and Axis::Status :
// when motor is servo or when stepper without encoder : no complains about YA,YB,YC
// AxisRawDataReader :
// minor change (axisLetter is now just belox axisNumer)
// Slit : no real change
//
// Revision 1.3  2007/04/19 08:26:23  coquet
// AxisRawDataReader :
// added 3 attributes
// * axisLetter
// * latchInput
// * homeInput
// GalilSSlit :
// * added tips in Status to come out of Limit switchs if necessary
// * added boolean property InvertPositionDirection to allow user to invert the positive direction if necessary
// GalilAxis :
// * attribute position is in ALARM if positionning failed
// * internal "EncoderMotorRatio" is set to 1.0 when motor is servo (according to bit 0 of Stat[x])  or if stepper motor has no encoder.
//
// Revision 1.2  2007/01/08 14:45:18  coquet
// AxisRawDataReader device first tests :
// bug corrections.
//
// Revision 1.1  2007/01/08 11:19:54  coquet
// added AxisRawDataReader device
// this devices offers read-only acces to raw data of an axis (selected by an attribute)
// added the files AxisRawDataReader*.*,
// modified ClassFactory, Makefile.vc, DevicesGalilV2.dsp Visual Studio project
//
//
// copyleft :  Synchrotron SOLEIL
//             L'Orme des Merisiers
//             Saint-Aubin - BP 48
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _AXISRAWDATAREADERCLASS_H
#define _AXISRAWDATAREADERCLASS_H

#include <tango.h>
#include <AxisRawDataReader.h>


namespace AxisRawDataReader_ns
{
//=====================================
//	Define classes for attributes
//=====================================
class positionErrorAttrib: public Tango::Attr
{
public:
	positionErrorAttrib():Attr("positionError", Tango::DEV_LONG, Tango::READ) {};
	~positionErrorAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AxisRawDataReader *>(dev))->read_positionError(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AxisRawDataReader *>(dev))->is_positionError_allowed(ty);}
};

class latchIsArmedAttrib: public Tango::Attr
{
public:
	latchIsArmedAttrib():Attr("latchIsArmed", Tango::DEV_BOOLEAN, Tango::READ) {};
	~latchIsArmedAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AxisRawDataReader *>(dev))->read_latchIsArmed(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AxisRawDataReader *>(dev))->is_latchIsArmed_allowed(ty);}
};

class latchOccuredAttrib: public Tango::Attr
{
public:
	latchOccuredAttrib():Attr("latchOccured", Tango::DEV_BOOLEAN, Tango::READ) {};
	~latchOccuredAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AxisRawDataReader *>(dev))->read_latchOccured(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AxisRawDataReader *>(dev))->is_latchOccured_allowed(ty);}
};

class latchInputAttrib: public Tango::Attr
{
public:
	latchInputAttrib():Attr("latchInput", Tango::DEV_BOOLEAN, Tango::READ) {};
	~latchInputAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AxisRawDataReader *>(dev))->read_latchInput(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AxisRawDataReader *>(dev))->is_latchInput_allowed(ty);}
};

class homeInputAttrib: public Tango::Attr
{
public:
	homeInputAttrib():Attr("homeInput", Tango::DEV_BOOLEAN, Tango::READ) {};
	~homeInputAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AxisRawDataReader *>(dev))->read_homeInput(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AxisRawDataReader *>(dev))->is_homeInput_allowed(ty);}
};

class analogInputAttrib: public Tango::Attr
{
public:
	analogInputAttrib():Attr("analogInput", Tango::DEV_DOUBLE, Tango::READ) {};
	~analogInputAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AxisRawDataReader *>(dev))->read_analogInput(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AxisRawDataReader *>(dev))->is_analogInput_allowed(ty);}
};

class velocityAttrib: public Tango::Attr
{
public:
	velocityAttrib():Attr("velocity", Tango::DEV_LONG, Tango::READ) {};
	~velocityAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AxisRawDataReader *>(dev))->read_velocity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AxisRawDataReader *>(dev))->is_velocity_allowed(ty);}
};

class commandedPosAttrib: public Tango::Attr
{
public:
	commandedPosAttrib():Attr("commandedPos", Tango::DEV_LONG, Tango::READ) {};
	~commandedPosAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AxisRawDataReader *>(dev))->read_commandedPos(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AxisRawDataReader *>(dev))->is_commandedPos_allowed(ty);}
};

class auxiliaryAttrib: public Tango::Attr
{
public:
	auxiliaryAttrib():Attr("auxiliary", Tango::DEV_LONG, Tango::READ) {};
	~auxiliaryAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AxisRawDataReader *>(dev))->read_auxiliary(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AxisRawDataReader *>(dev))->is_auxiliary_allowed(ty);}
};

class encoderAttrib: public Tango::Attr
{
public:
	encoderAttrib():Attr("encoder", Tango::DEV_LONG, Tango::READ) {};
	~encoderAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AxisRawDataReader *>(dev))->read_encoder(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AxisRawDataReader *>(dev))->is_encoder_allowed(ty);}
};

class axisLetterAttrib: public Tango::Attr
{
public:
	axisLetterAttrib():Attr("axisLetter", Tango::DEV_STRING, Tango::READ) {};
	~axisLetterAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AxisRawDataReader *>(dev))->read_axisLetter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AxisRawDataReader *>(dev))->is_axisLetter_allowed(ty);}
};

class axisNumberAttrib: public Tango::Attr
{
public:
	axisNumberAttrib():Attr("axisNumber", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~axisNumberAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AxisRawDataReader *>(dev))->read_axisNumber(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AxisRawDataReader *>(dev))->write_axisNumber(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AxisRawDataReader *>(dev))->is_axisNumber_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class ArmLatchClass : public Tango::Command
{
public:
	ArmLatchClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ArmLatchClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ArmLatchClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AxisRawDataReader *>(dev))->is_ArmLatch_allowed(any);}
};



class ReportLatchedPositionClass : public Tango::Command
{
public:
	ReportLatchedPositionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReportLatchedPositionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReportLatchedPositionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AxisRawDataReader *>(dev))->is_ReportLatchedPosition_allowed(any);}
};



//
// The AxisRawDataReaderClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	AxisRawDataReaderClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static AxisRawDataReaderClass *init(const char *);
	static AxisRawDataReaderClass *instance();
	~AxisRawDataReaderClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	AxisRawDataReaderClass(string &);
	static AxisRawDataReaderClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace AxisRawDataReader_ns

#endif // _AXISRAWDATAREADERCLASS_H
