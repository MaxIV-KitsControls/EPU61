//=============================================================================
//
// file : 			 GalilAxis.h
//
// description : Include for the GalilAxis class.
//
// project :	Axis
//
// $Author: buteau $
//
// $Revision: 1.21 $
//
// $Log: GalilAxis.h,v $
// Revision 1.21  2011/07/15 09:47:42  buteau
// MANTIS 19368
//
// Revision 1.19  2011/01/03 09:48:11  coquet
// added property AxisInitVelocity written on HW when cmd AxisInitializeReferencePosition is sent (in the same way as AxisInitPosition)
// To be tested with HW
//
//
// copyleft : 	 European Synchrotron Radiation Facility
//							 BP 220, Grenoble 38043
//							 FRANCE
//
//=============================================================================
//
//			This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//				 (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _GALILAXIS_H
#define _GALILAXIS_H

#include <tango.h>

//- galil support stuffs
#include <galil_support/AxisFactory.h>

//using namespace Tango;

/**
 * @author	$Author: buteau $
 * @version $Revision: 1.21 $
 */

 // Add your own constants definitions here.
 //-----------------------------------------------


namespace GalilAxis_ns
{
//- device commands that can be disabled using the DisabledCmds property
#define kCMD_FORWARD  0
#define kCMD_BACKWARD 1
#define kCMD_LAST     1

//- name of device commands that can be disabled using the DisabledCmds property
#define kCMD_FORWARD_NAME  "forward"
#define kCMD_BACKWARD_NAME "backward"

/**
 * Class Description:
 * 
 */

/*
 *	Device States Description:
*  Tango::MOVING :   *
*  Tango::FAULT :    *
*  Tango::STANDBY :  *
*  Tango::OFF :      *
*  Tango::ALARM :    *
*  Tango::DISABLE :  *
*  Tango::UNKNOWN :  communication broken with CB
 */


class GalilAxis: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//------------------------------------------------------------- 
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevDouble	*attr_acceleration_read;
		Tango::DevDouble	attr_acceleration_write;
		Tango::DevDouble	*attr_accuracy_read;
		Tango::DevDouble	attr_accuracy_write;
		Tango::DevDouble	*attr_backlash_read;
		Tango::DevDouble	attr_backlash_write;
		Tango::DevBoolean	*attr_backwardLimitSwitch_read;
		Tango::DevDouble	*attr_deceleration_read;
		Tango::DevDouble	attr_deceleration_write;
		Tango::DevBoolean	*attr_forwardLimitSwitch_read;
		Tango::DevDouble	*attr_offset_read;
		Tango::DevDouble	attr_offset_write;
		Tango::DevDouble	*attr_position_read;
		Tango::DevDouble	attr_position_write;
		Tango::DevBoolean	*attr_positionLocked_read;
		Tango::DevBoolean	attr_positionLocked_write;
		Tango::DevDouble	*attr_velocity_read;
		Tango::DevDouble	attr_velocity_write;
		Tango::DevDouble	*attr_lockedPositionHistory_read;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	Axis identifier on the motion controller. This number must be in [0..7] or [ A ..H].
 *	This critical property does not have any default value and must be specified.
 */
	string	axisNumber;
/**
 *	Property used to define the conversion from <I>encoder</I> to <I>user</I> units<BR>
 *	according to the following formula: <BR>
 *	<B> AxisPosition (<I> in UserUnits </I>) = AxisEncoderPosition * PositionRatio + Offset
 *	</B>
 *	<BR>
 *	Defaults to 1.0.
 *	
 */
	Tango::DevDouble	axisPositionRatio;
/**
 *	The type of the encoder associated with this axis
 *	<UL>
 *	<LI> 0: for no encoder </LI>
 *	<LI> 1: for incremental encoder </LI>
 *	<LI> 2: for absolute encoder </LI>
 *	</UL>
 *	This critical property has no default value.
 */
	Tango::DevLong	axisEncoderType;
/**
 *	Type of initialization process. form : LSBWD:2;LSFWD:1;FH:-3;FI:2;DP;
 *	<UL>
 *	<LI> LSBWD: 2  : goes 2 times on limit switch backward, decreasing speed each time
 *	<LI> LSFWD: 15 : goes 15 times on limit switch forward, decreasing speed each time
 *	<LI> FH   : -3 : goes 3 times on Home switch, decreasing speed eeach time, begining negative direction
 *	<LI> FI   : 2  : goes 2 times on Index of encoder, decreasing speed each time, begining positive direction
 *	<LI> DP        : does nothing, use DefinePosition(position) to initialize position
 *	</UL>
 *	default : 0
 */
	string	axisInitType;
/**
 *	This will be the axis position (in encoder units) after execution of the InitializeReferencePoisition command.
 *	Defaults to 0.
 */
	Tango::DevDouble	axisInitPosition;
/**
 *	enables the maintenance position mode : a closed loop functionality for steppers
 *	see micro-code documentation for mode and limitations
 *	
 *	EnableMaintenanceMode :
 *	Moteurs steppers avec codeurs uniquement.
 *	Valide la surveillance dynamique de l'erreur de trajectoire
 *	Valeur par d�faut : false (inhib�)
 *	Only for stepper motors with Encoders
 *	When true enables the dynamic monitoring of a following error
 *	default value : false (disabled)
 */
	Tango::DevBoolean	enableMaintenanceMode;
/**
 *	allows the Remote Cbox ( t�lecommande manuelle) to work if true
 *	inhibits the RemoteCBox functionnality when false,
 *	if Inputs/outputs are used for another application for example.
 */
	Tango::DevBoolean	allowRemoteCbox;
/**
 *	Enables the 'duty cycle' support
 */
	Tango::DevBoolean	enableDutyCycle;
/**
 *	Doc. to be written by ECA - valid range is [?, ?] - defaults to 1.0
 */
	Tango::DevDouble	percent;
/**
 *	Doc. to be written by ECA - valid range is [?, ?] - defaults to 5
 */
	Tango::DevULong	retry;
/**
 *	List of disabled commands
 */
	vector<string>	disabledCmds;
/**
 *	EnableErrorCorrection :
 *	Moteurs steppers avec codeurs uniquement.
 *	Valide la correction dynamique de trajectoire
 *	Valeur par d�faut : false (inhib�)
 *	Only for Stepper motors with encoders
 *	When true, enables the dynamic following error correction
 *	Default : false (disabled)
 */
	Tango::DevBoolean	enableErrorCorrection;
/**
 *	stabilization time for the motor.
 *	The motor is still in MOVING state  SettlingTime after move
 *	settling time is performed in the micro-code in the controlbox
 *	Unit : milli-seconds
 *	default value : 100
 *	This property is not automatically created by code.
 */
	Tango::DevULong	settlingTime;
/**
 *	The <lock position> history depth. Defaults to 1024.
 */
	Tango::DevULong	lockedPositionHistoryDepth;
/**
 *	Position derivation threshold of the "position locking" mechanism.
 *	This is the difference threshold -  between locked-pos and current-pos. - above which a <correction> is applied.
 *	This property must be expressed in <UserUnit> (i.e. same unit as the associated axis position).
 *	Defaults to 1000.
 */
	Tango::DevULong	lockedPositionConstraint;
/**
 *	The checking period (in seconds) of the position locking mechanism.
 *	Defaults to 1.
 */
	Tango::DevULong	lockedPositionCheckingPeriodSecs;
/**
 *	Width of the locked position averaging window (in number of samples).
 *	A sample is obtained every <LockedPositionCheckingPeriodSecs> seconds.
 *	Defaults to 10.
 */
	Tango::DevULong	lockedPositionAveragingWindowWidth;
/**
 *	Axis Initialization initial velocity
 *	initial velocity for InitializeReferencePosition (Homing)
 *	in user units
 *	if = 0 : current velocity is used
 *	default : 0 
 *	
 */
	Tango::DevDouble	axisInitVelocity;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl Class.
 *	@param s	Device Name
 */
	GalilAxis(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl Class.
 *	@param s	Device Name
 */
	GalilAxis(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl Class.
 *	@param s	Device name
 *	@param d	Device description.
 */
	GalilAxis(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */ 
	virtual ~GalilAxis() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name GalilAxis methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for acceleration acquisition result.
 */
	virtual void read_acceleration(Tango::Attribute &attr);
/**
 *	Write acceleration attribute values to hardware.
 */
	virtual void write_acceleration(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for accuracy acquisition result.
 */
	virtual void read_accuracy(Tango::Attribute &attr);
/**
 *	Write accuracy attribute values to hardware.
 */
	virtual void write_accuracy(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for backlash acquisition result.
 */
	virtual void read_backlash(Tango::Attribute &attr);
/**
 *	Write backlash attribute values to hardware.
 */
	virtual void write_backlash(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for backwardLimitSwitch acquisition result.
 */
	virtual void read_backwardLimitSwitch(Tango::Attribute &attr);
/**
 *	Extract real attribute values for deceleration acquisition result.
 */
	virtual void read_deceleration(Tango::Attribute &attr);
/**
 *	Write deceleration attribute values to hardware.
 */
	virtual void write_deceleration(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for forwardLimitSwitch acquisition result.
 */
	virtual void read_forwardLimitSwitch(Tango::Attribute &attr);
/**
 *	Extract real attribute values for offset acquisition result.
 */
	virtual void read_offset(Tango::Attribute &attr);
/**
 *	Write offset attribute values to hardware.
 */
	virtual void write_offset(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for position acquisition result.
 */
	virtual void read_position(Tango::Attribute &attr);
/**
 *	Write position attribute values to hardware.
 */
	virtual void write_position(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for positionLocked acquisition result.
 */
	virtual void read_positionLocked(Tango::Attribute &attr);
/**
 *	Write positionLocked attribute values to hardware.
 */
	virtual void write_positionLocked(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for velocity acquisition result.
 */
	virtual void read_velocity(Tango::Attribute &attr);
/**
 *	Write velocity attribute values to hardware.
 */
	virtual void write_velocity(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for lockedPositionHistory acquisition result.
 */
	virtual void read_lockedPositionHistory(Tango::Attribute &attr);
/**
 *	Read/Write allowed for acceleration attribute.
 */
	virtual bool is_acceleration_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for accuracy attribute.
 */
	virtual bool is_accuracy_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for backlash attribute.
 */
	virtual bool is_backlash_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for backwardLimitSwitch attribute.
 */
	virtual bool is_backwardLimitSwitch_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for deceleration attribute.
 */
	virtual bool is_deceleration_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for forwardLimitSwitch attribute.
 */
	virtual bool is_forwardLimitSwitch_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for offset attribute.
 */
	virtual bool is_offset_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for position attribute.
 */
	virtual bool is_position_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for positionLocked attribute.
 */
	virtual bool is_positionLocked_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for velocity attribute.
 */
	virtual bool is_velocity_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for lockedPositionHistory attribute.
 */
	virtual bool is_lockedPositionHistory_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Forward command.
 */
	virtual bool is_Forward_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Stop command.
 */
	virtual bool is_Stop_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Backward command.
 */
	virtual bool is_Backward_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for InitializeReferencePosition command.
 */
	virtual bool is_InitializeReferencePosition_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for MotorOFF command.
 */
	virtual bool is_MotorOFF_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for MotorON command.
 */
	virtual bool is_MotorON_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for DefinePosition command.
 */
	virtual bool is_DefinePosition_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ComputeNewOffset command.
 */
	virtual bool is_ComputeNewOffset_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for On command.
 */
	virtual bool is_On_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Off command.
 */
	virtual bool is_Off_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetDetailOfState command.
 */
	virtual bool is_GetDetailOfState_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();
/**
 * This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *	@return	Status description
 *	@exception DevFailed
 */
	virtual Tango::ConstDevString	dev_status();
/**
 * Start the movement in the positive way
 *	@exception DevFailed
 */
	void	forward();
/**
 * 
 *	@exception DevFailed
 */
	void	stop();
/**
 * Start the movement in the negative way
 *	@exception DevFailed
 */
	void	backward();
/**
 * requests an initialization of axis
 *	initialization type as described in AxisInitType Proerty
 *	if initialisation success, after completion of initialization routine the axis position will be set
 *	at AxisInitPosition in encoder units
 *	@exception DevFailed
 */
	void	initialize_reference_position();
/**
 * Disable the power amplifier of the motor
 *	DEPRECATED use Off command
 *	@exception DevFailed
 */
	void	motor_off();
/**
 * Enables the power amplifier of the motor
 *	DEPRECATED use On command
 *	@exception DevFailed
 */
	void	motor_on();
/**
 * set the position at ( encoder units ) position
 *	@param	argin	initialisation position in encoder units
 *	@exception DevFailed
 */
	void	define_position(Tango::DevDouble);
/**
 * use:
 *	if you want to be here and now at the user position X, call that method, passing X as argument.
 *	The new offset will be computed and applied.
 *	@param	argin	the position you want to have here and now
 *	@exception DevFailed
 */
	void	compute_new_offset(Tango::DevDouble);
/**
 * enables power on the amplifier
 *	@exception DevFailed
 */
	void	on();
/**
 * disables power on the amplifier
 *	@exception DevFailed
 */
	void	off();
/**
 * returns the value the detail requested (return true or false)
 *	
 *	1=Axis positionning failed
 *	2=Axis not initialised
 *	Other = returns false
 *	@param	argin	detail : [1=Axis positionning failed|2=Axis not initialised]
 *	@return	bool value related to Argin
 *	@exception DevFailed
 */
	Tango::DevBoolean	get_detail_of_state(Tango::DevLong);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//------------------------------------------------------------- 



protected : 
	//	Add your own data members here
	//-----------------------------------------


private :
  //- the associated galil::Axis
  galil::Axis * m_axis;

	//- init utilities
	bool m_init_device_done;
	bool m_properties_missing;

  //- the device status string
	std::string m_status_str;

  //- check wether or not the device is properly init
  void check_init ()
    throw (Tango::DevFailed);

  //- device commands that can be disabled using the DisabledCmds property
  bool disabled_cmds[kCMD_LAST];
};

} // namespace_ns

#endif	// _GALILAXIS_H
