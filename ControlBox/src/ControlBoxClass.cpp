static const char *RcsId     = "$Header: /usr/local/CVS/DeviceServer/Generic/Motorisation/ControlBoxV2/src/ControlBoxClass.cpp,v 1.5 2011/07/15 09:47:42 buteau Exp $";
static const char *TagName   = "$Name: release_2_5_4 $";
static const char *HttpServer= "http://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/";
//+=============================================================================
//
// file :        ControlBoxClass.cpp
//
// description : C++ source for the ControlBoxClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the ControlBox once per process.
//
// project :     TANGO Device Server
//
// $Author: buteau $
//
// $Revision: 1.5 $
//
// $Log: ControlBoxClass.cpp,v $
// Revision 1.5  2011/07/15 09:47:42  buteau
// MANTIS 19368
//
// Revision 1.3  2007/01/05 08:37:51  coquet
// * bug corrections
// * now supports negative AxisPositionRatio use it to have a positive move direction opposite to the positive move direction defined by motorist
// * added ControlBox:GetFirmwareRevision, view the firmware revision command <CTRL>R<CTRL>V
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#include <ControlBox.h>
#include <ControlBoxClass.h>

#include <tango.h>



namespace ControlBox_ns
{
//+----------------------------------------------------------------------------
//
// method : 		ExecLowLevelCmdClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ExecLowLevelCmdClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ExecLowLevelCmdClass::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	return insert((static_cast<ControlBox *>(device))->exec_low_level_cmd(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		GetMicrocodeRevisionClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetMicrocodeRevisionClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetMicrocodeRevisionClass::execute(): arrived" << endl;

	return insert((static_cast<ControlBox *>(device))->get_microcode_revision());
}

//+----------------------------------------------------------------------------
//
// method : 		GetFirmwareRevisionClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetFirmwareRevisionClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetFirmwareRevisionClass::execute(): arrived" << endl;

	return insert((static_cast<ControlBox *>(device))->get_firmware_revision());
}

//+----------------------------------------------------------------------------
//
// method : 		ResetClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ResetClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ResetClass::execute(): arrived" << endl;

	((static_cast<ControlBox *>(device))->reset());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		StartMicrocodeClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *StartMicrocodeClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "StartMicrocodeClass::execute(): arrived" << endl;

	((static_cast<ControlBox *>(device))->start_microcode());
	return new CORBA::Any();
}




//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
ControlBoxClass *ControlBoxClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		ControlBoxClass::ControlBoxClass(string &s)
// 
// description : 	constructor for the ControlBoxClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
ControlBoxClass::ControlBoxClass(string &s):DeviceClass(s)
{

	cout2 << "Entering ControlBoxClass constructor" << endl;
	set_default_property();
	write_class_property();
	get_class_property();
	
	cout2 << "Leaving ControlBoxClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		ControlBoxClass::~ControlBoxClass()
// 
// description : 	destructor for the ControlBoxClass
//
//-----------------------------------------------------------------------------
ControlBoxClass::~ControlBoxClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		ControlBoxClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
ControlBoxClass *ControlBoxClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new ControlBoxClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

ControlBoxClass *ControlBoxClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		ControlBoxClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void ControlBoxClass::command_factory()
{
	command_list.push_back(new ResetClass("Reset",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new StartMicrocodeClass("StartMicrocode",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetMicrocodeRevisionClass("GetMicrocodeRevision",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"the microcode revision ",
		Tango::OPERATOR));
	command_list.push_back(new GetFirmwareRevisionClass("GetFirmwareRevision",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"the firmware revision ",
		Tango::OPERATOR));
	command_list.push_back(new ExecLowLevelCmdClass("ExecLowLevelCmd",
		Tango::DEV_STRING, Tango::DEV_STRING,
		"the cmd to execute",
		"the cmd reply",
		Tango::EXPERT));

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		ControlBoxClass::get_class_property
// 
// description : 	Get the class property for specified name.
//
// in :		string	name : The property name
//
//+----------------------------------------------------------------------------
Tango::DbDatum ControlBoxClass::get_class_property(string &prop_name)
{
	for (int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		ControlBoxClass::get_default_device_property()
// 
// description : 	Return the default value for device property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum ControlBoxClass::get_default_device_property(string &prop_name)
{
	for (int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//+----------------------------------------------------------------------------
//
// method : 		ControlBoxClass::get_default_class_property()
// 
// description : 	Return the default value for class property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum ControlBoxClass::get_default_class_property(string &prop_name)
{
	for (int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		ControlBoxClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void ControlBoxClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	//	Create all devices.(Automatic code generation)
	//-------------------------------------------------------------
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create devices and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new ControlBox(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before if database used.
		//---------------------------------------------
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
	//	End of Automatic code generation
	//-------------------------------------------------------------

}
//+----------------------------------------------------------------------------
//	Method: ControlBoxClass::attribute_factory(vector<Tango::Attr *> &att_list)
//-----------------------------------------------------------------------------
void ControlBoxClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	//	Attribute : oKCommandCounter
	oKCommandCounterAttrib	*o_kcommand_counter = new oKCommandCounterAttrib();
	Tango::UserDefaultAttrProp	o_kcommand_counter_prop;
	o_kcommand_counter_prop.set_label("commandes accept�es");
	o_kcommand_counter_prop.set_description("compteur des commandes accept�es");
	o_kcommand_counter->set_default_properties(o_kcommand_counter_prop);
	att_list.push_back(o_kcommand_counter);

	//	Attribute : badCommandCounter
	badCommandCounterAttrib	*bad_command_counter = new badCommandCounterAttrib();
	Tango::UserDefaultAttrProp	bad_command_counter_prop;
	bad_command_counter_prop.set_label("erreurs de commande");
	bad_command_counter_prop.set_description("compteur des commandes en erreur");
	bad_command_counter->set_default_properties(bad_command_counter_prop);
	att_list.push_back(bad_command_counter);

}

//+----------------------------------------------------------------------------
//
// method : 		ControlBoxClass::get_class_property()
// 
// description : 	Read the class properties from database.
//
//-----------------------------------------------------------------------------
void ControlBoxClass::get_class_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read class properties from database.(Automatic code generation)
	//------------------------------------------------------------------

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;


	//	End of Automatic code generation
	//------------------------------------------------------------------

}

//+----------------------------------------------------------------------------
//
// method : 	ControlBoxClass::set_default_property
// 
// description: Set default property (class and device) for wizard.
//              For each property, add to wizard property name and description
//              If default value has been set, add it to wizard property and
//              store it in a DbDatum.
//
//-----------------------------------------------------------------------------
void ControlBoxClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;

	vector<string>	vect_data;
	//	Set Default Class Properties
	//	Set Default Device Properties
	prop_name = "IPAddress";
	prop_desc = "IP Address of the controller";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Port";
	prop_desc = "TCP/IP port for communication (optional)";
	prop_def  = "5001";
	vect_data.clear();
	vect_data.push_back("5001");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "TCPTimeOut";
	prop_desc = "valeur de timeout en secondes";
	prop_def  = "3";
	vect_data.clear();
	vect_data.push_back("3");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "DataRecordPollingPeriod";
	prop_desc = "polling period pour la commande GetDataRecord\nen ms";
	prop_def  = "100";
	vect_data.clear();
	vect_data.push_back("100");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

}
//+----------------------------------------------------------------------------
//
// method : 		ControlBoxClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void ControlBoxClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("GalilV2");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("controle au bas niveau la communication avec la carte d'axes Galil DMC2182");
	str_desc.push_back("le controle d'axe proprement dit est r�alis� par la classe GalilAxis");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs location
	string	rcsId(RcsId);
	string	filename(classname);
	start = rcsId.find("/");
	if (start!=string::npos)
	{
		filename += "Class.cpp";
		end   = rcsId.find(filename);
		if (end>start)
		{
			string	strloc = rcsId.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	//	Get CVS tag revision
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

}	// namespace
