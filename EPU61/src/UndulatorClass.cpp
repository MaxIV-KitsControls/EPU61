/*----- PROTECTED REGION ID(UndulatorClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        UndulatorClass.cpp
//
// description : C++ source for the UndulatorClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the «name» once per process.
//
// project :     .
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <UndulatorClass.h>

/*----- PROTECTED REGION END -----*/

//-------------------------------------------------------------------
/**
 *	Create UndulatorClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_Undulator_class(const char *name) {
		return Undulator_ns::UndulatorClass::init(name);
	}
}


namespace Undulator_ns
{


//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
UndulatorClass *UndulatorClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		UndulatorClass::UndulatorClass(string &s)
 * description : 	constructor for the UndulatorClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
UndulatorClass::UndulatorClass(string &s):DeviceClass(s)
{
	cout2 << "Entering UndulatorClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();

	/*----- PROTECTED REGION ID(Undulator::Class::constructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Undulator::Class::constructor

	cout2 << "Leaving UndulatorClass constructor" << endl;
}


//--------------------------------------------------------
/**
 * method : 		UndulatorClass::~UndulatorClass()
 * description : 	destructor for the UndulatorClass
 */
//--------------------------------------------------------
UndulatorClass::~UndulatorClass()
{
	/*----- PROTECTED REGION ID(Undulator::Class::destructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Undulator::Class::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		UndulatorClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
UndulatorClass *UndulatorClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new UndulatorClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		UndulatorClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
UndulatorClass *UndulatorClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}




//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		StopGapClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StopGapClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "StopGapClass::execute(): arrived" << endl;

	
	((static_cast<Undulator *>(device))->stop_gap());
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		ToggleStopAllClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ToggleStopAllClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ToggleStopAllClass::execute(): arrived" << endl;

	Tango::DevBoolean	argin;
	extract(in_any, argin);
	((static_cast<Undulator *>(device))->toggle_stop_all(argin));
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		DisableLimitsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DisableLimitsClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DisableLimitsClass::execute(): arrived" << endl;

	Tango::DevBoolean	argin;
	extract(in_any, argin);
	((static_cast<Undulator *>(device))->disable_limits(argin));
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		StopPhaseClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StopPhaseClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "StopPhaseClass::execute(): arrived" << endl;

	
	((static_cast<Undulator *>(device))->stop_phase());
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		CalibrateGapClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CalibrateGapClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "CalibrateGapClass::execute(): arrived" << endl;

	const Tango::DevVarDoubleArray	*argin;
	extract(in_any, argin);
	((static_cast<Undulator *>(device))->calibrate_gap(argin));
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		CalibratePhaseClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CalibratePhaseClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "CalibratePhaseClass::execute(): arrived" << endl;

	
	((static_cast<Undulator *>(device))->calibrate_phase());
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		LoadCorrectionDataClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *LoadCorrectionDataClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "LoadCorrectionDataClass::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);
	((static_cast<Undulator *>(device))->load_correction_data(argin));
	return new CORBA::Any();
}




//===================================================================
//	Properties management
//===================================================================

//--------------------------------------------------------
/**
 * method : 		UndulatorClass::get_class_property
 * description : 	Get the class property for specified name.
 *
 * @param	name  The property name
 */
//--------------------------------------------------------
Tango::DbDatum UndulatorClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : Undulator::UndulatorClass::get_default_device_property()()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum UndulatorClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : Undulator::UndulatorClass::get_default_class_property()()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum UndulatorClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : Undulator::UndulatorClass::get_class_property()
 *	Description : //	Add your own code to initialize
 */
//--------------------------------------------------------
void UndulatorClass::get_class_property()
{
}


//--------------------------------------------------------
/**
 *	Method      : Undulator::UndulatorClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *	              For each property, add to wizard property name and description.
 *	              If default value has been set, add it to wizard property and.
 *	              store it in a DbDatum.
 */
//--------------------------------------------------------
void UndulatorClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;
	
	//	Set Default Class Properties

	//	Set Default Device Properties

	prop_name = "ControlBoxGapProxy";
	prop_desc = "Proxy to ControlBox with gap DMC";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "GapAxes";
	prop_desc = "Proxy to axes that control gap movement. Order: Z1,Z2,Z3,Z4";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "PhaseAxes";
	prop_desc = "Proxy to axes that control phase movement.  Order: X1,X2,X3,X4";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "ControlBoxPhaseProxy";
	prop_desc = "Proxy to controlbox with phase DMC";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "GearedAxes";
	prop_desc = "Proxy to GalilGearedAxes that control upper and lower girder. Order: Upper girder, Lower girder";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "DataFile";
	prop_desc = "Filename containing interpolation data.";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "PowerSupplyProxy";
	prop_desc = "Proxy server where power supply will read and write current.";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "PowerSupplyAttributeNames";
	prop_desc = "Attribute name for each power supply to read from and write to.";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}


//--------------------------------------------------------
/**
 *	Method      : Undulator::UndulatorClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void UndulatorClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Device server for controling movement of undulator axes. ");
	str_desc.push_back("It features gap movement and phase movement in 4 modes.");
	str_desc.push_back("In expert mode, user can configure the behaviour of axes and restrict certain actions.");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs or svn location
	string	filename("Undulator");
	filename += "Class.cpp";
	
	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}
	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("Device_Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}




//===================================================================
//	Factory methods
//===================================================================


//--------------------------------------------------------
/**
 * method : 		UndulatorClass::device_factory
 * description : 	Create the device object(s)
 *                  and store them in the device list
 *
 * @param	*devlist_ptr	The device name list
 */
//--------------------------------------------------------
void UndulatorClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	/*----- PROTECTED REGION ID(Undulator::Class::device_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	Undulator::Class::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new Undulator(this, (*devlist_ptr)[i]));							 
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		Undulator *dev = static_cast<Undulator *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(Undulator::Class::device_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	Undulator::Class::device_factory_after

	
}


//--------------------------------------------------------
/**
 *	Method      : Undulator::UndulatorClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *	              and store them in the attribute list
 */
//--------------------------------------------------------
void UndulatorClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(Undulator::Class::attribute_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	Undulator::Class::attribute_factory_before


	//	Attribute : Gap
	GapAttrib	*gap = new GapAttrib();
	Tango::UserDefaultAttrProp	gap_prop;
	gap_prop.set_description("Read-back and set-point for current gap. \nWriting to this attribute commences movement for the gap, \nusing the current operator center offset and taper.");
	//	label	not set for	Gap
	gap_prop.set_unit("um");
	//	standard_unit	not set for	Gap
	//	display_unit	not set for	Gap
	//	format	not set for	Gap
	gap_prop.set_max_value("220000");
	gap_prop.set_min_value("14000");
	//	max_alarm	not set for	Gap
	//	min_alarm	not set for	Gap
	//	max_warning	not set for	Gap
	//	min_warning	not set for	Gap
	//	delta_t	not set for	Gap
	//	delta_val	not set for	Gap
	gap->set_default_properties(gap_prop);
	gap->set_polling_period(2000);
	gap->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	Gap does not fire change event
	//	Gap does not fire archive event
	//	Gap does not fire data_ready event
	att_list.push_back(gap);

	//	Attribute : EngineeringLock
	EngineeringLockAttrib	*engineeringlock = new EngineeringLockAttrib();
	Tango::UserDefaultAttrProp	engineeringlock_prop;
	engineeringlock_prop.set_description("Setting this attribute to TRUE disables operator composite movements. \nEngineering movements to be done directly on the ControlBox axis devices.");
	//	label	not set for	EngineeringLock
	//	unit	not set for	EngineeringLock
	//	standard_unit	not set for	EngineeringLock
	//	display_unit	not set for	EngineeringLock
	//	format	not set for	EngineeringLock
	//	max_value	not set for	EngineeringLock
	//	min_value	not set for	EngineeringLock
	//	max_alarm	not set for	EngineeringLock
	//	min_alarm	not set for	EngineeringLock
	//	max_warning	not set for	EngineeringLock
	//	min_warning	not set for	EngineeringLock
	//	delta_t	not set for	EngineeringLock
	//	delta_val	not set for	EngineeringLock
	engineeringlock->set_default_properties(engineeringlock_prop);
	//	Not Polled
	engineeringlock->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	EngineeringLock does not fire change event
	//	EngineeringLock does not fire archive event
	//	EngineeringLock does not fire data_ready event
	att_list.push_back(engineeringlock);

	//	Attribute : GapAcceleration
	GapAccelerationAttrib	*gapacceleration = new GapAccelerationAttrib();
	Tango::UserDefaultAttrProp	gapacceleration_prop;
	gapacceleration_prop.set_description("Gap movement average acceleration in um/s^2.");
	//	label	not set for	GapAcceleration
	gapacceleration_prop.set_unit("um/s^2");
	//	standard_unit	not set for	GapAcceleration
	//	display_unit	not set for	GapAcceleration
	//	format	not set for	GapAcceleration
	//	max_value	not set for	GapAcceleration
	//	min_value	not set for	GapAcceleration
	//	max_alarm	not set for	GapAcceleration
	//	min_alarm	not set for	GapAcceleration
	//	max_warning	not set for	GapAcceleration
	//	min_warning	not set for	GapAcceleration
	//	delta_t	not set for	GapAcceleration
	//	delta_val	not set for	GapAcceleration
	gapacceleration->set_default_properties(gapacceleration_prop);
	gapacceleration->set_polling_period(2000);
	gapacceleration->set_disp_level(Tango::EXPERT);
	gapacceleration->set_memorized();
	gapacceleration->set_memorized_init(true);
	//	GapAcceleration does not fire change event
	//	GapAcceleration does not fire archive event
	//	GapAcceleration does not fire data_ready event
	att_list.push_back(gapacceleration);

	//	Attribute : GapSpeed
	GapSpeedAttrib	*gapspeed = new GapSpeedAttrib();
	Tango::UserDefaultAttrProp	gapspeed_prop;
	gapspeed_prop.set_description("Final profile velocity in um/s for gap movements.");
	//	label	not set for	GapSpeed
	gapspeed_prop.set_unit("um/s");
	//	standard_unit	not set for	GapSpeed
	//	display_unit	not set for	GapSpeed
	//	format	not set for	GapSpeed
	//	max_value	not set for	GapSpeed
	//	min_value	not set for	GapSpeed
	//	max_alarm	not set for	GapSpeed
	//	min_alarm	not set for	GapSpeed
	//	max_warning	not set for	GapSpeed
	//	min_warning	not set for	GapSpeed
	//	delta_t	not set for	GapSpeed
	//	delta_val	not set for	GapSpeed
	gapspeed->set_default_properties(gapspeed_prop);
	gapspeed->set_polling_period(2000);
	gapspeed->set_disp_level(Tango::EXPERT);
	gapspeed->set_memorized();
	gapspeed->set_memorized_init(true);
	//	GapSpeed does not fire change event
	//	GapSpeed does not fire archive event
	//	GapSpeed does not fire data_ready event
	att_list.push_back(gapspeed);

	//	Attribute : PhaseAcceleration
	PhaseAccelerationAttrib	*phaseacceleration = new PhaseAccelerationAttrib();
	Tango::UserDefaultAttrProp	phaseacceleration_prop;
	phaseacceleration_prop.set_description("Phase movement average acceleration in um/s^2.");
	//	label	not set for	PhaseAcceleration
	phaseacceleration_prop.set_unit("um/s^2");
	//	standard_unit	not set for	PhaseAcceleration
	//	display_unit	not set for	PhaseAcceleration
	//	format	not set for	PhaseAcceleration
	//	max_value	not set for	PhaseAcceleration
	//	min_value	not set for	PhaseAcceleration
	//	max_alarm	not set for	PhaseAcceleration
	//	min_alarm	not set for	PhaseAcceleration
	//	max_warning	not set for	PhaseAcceleration
	//	min_warning	not set for	PhaseAcceleration
	//	delta_t	not set for	PhaseAcceleration
	//	delta_val	not set for	PhaseAcceleration
	phaseacceleration->set_default_properties(phaseacceleration_prop);
	phaseacceleration->set_polling_period(2000);
	phaseacceleration->set_disp_level(Tango::EXPERT);
	phaseacceleration->set_memorized();
	phaseacceleration->set_memorized_init(true);
	//	PhaseAcceleration does not fire change event
	//	PhaseAcceleration does not fire archive event
	//	PhaseAcceleration does not fire data_ready event
	att_list.push_back(phaseacceleration);

	//	Attribute : PhaseMode
	PhaseModeAttrib	*phasemode = new PhaseModeAttrib();
	Tango::UserDefaultAttrProp	phasemode_prop;
	phasemode_prop.set_description("Read-back and set-point for desired phase mode. \nWill be used next time Phase is written.");
	//	label	not set for	PhaseMode
	//	unit	not set for	PhaseMode
	//	standard_unit	not set for	PhaseMode
	//	display_unit	not set for	PhaseMode
	//	format	not set for	PhaseMode
	//	max_value	not set for	PhaseMode
	//	min_value	not set for	PhaseMode
	//	max_alarm	not set for	PhaseMode
	//	min_alarm	not set for	PhaseMode
	//	max_warning	not set for	PhaseMode
	//	min_warning	not set for	PhaseMode
	//	delta_t	not set for	PhaseMode
	//	delta_val	not set for	PhaseMode
	phasemode->set_default_properties(phasemode_prop);
	phasemode->set_polling_period(2000);
	phasemode->set_disp_level(Tango::OPERATOR);
	phasemode->set_memorized();
	phasemode->set_memorized_init(true);
	//	PhaseMode does not fire change event
	//	PhaseMode does not fire archive event
	//	PhaseMode does not fire data_ready event
	att_list.push_back(phasemode);

	//	Attribute : Phase
	PhaseAttrib	*phase = new PhaseAttrib();
	Tango::UserDefaultAttrProp	phase_prop;
	phase_prop.set_description("Read-back and set-point for phase offset.\nWhen this attribute is written new phase movement commences \nusing phase mode specified in PhaseMode attribute.");
	//	label	not set for	Phase
	phase_prop.set_unit("um");
	//	standard_unit	not set for	Phase
	//	display_unit	not set for	Phase
	//	format	not set for	Phase
	phase_prop.set_max_value("30500");
	phase_prop.set_min_value("-30500");
	//	max_alarm	not set for	Phase
	//	min_alarm	not set for	Phase
	//	max_warning	not set for	Phase
	//	min_warning	not set for	Phase
	//	delta_t	not set for	Phase
	//	delta_val	not set for	Phase
	phase->set_default_properties(phase_prop);
	phase->set_polling_period(2000);
	phase->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	Phase does not fire change event
	//	Phase does not fire archive event
	//	Phase does not fire data_ready event
	att_list.push_back(phase);

	//	Attribute : PhaseSpeed
	PhaseSpeedAttrib	*phasespeed = new PhaseSpeedAttrib();
	Tango::UserDefaultAttrProp	phasespeed_prop;
	phasespeed_prop.set_description("Final profile velocity in um/s for phase (sub-girders) movement.");
	//	label	not set for	PhaseSpeed
	phasespeed_prop.set_unit("um/s");
	//	standard_unit	not set for	PhaseSpeed
	//	display_unit	not set for	PhaseSpeed
	//	format	not set for	PhaseSpeed
	//	max_value	not set for	PhaseSpeed
	//	min_value	not set for	PhaseSpeed
	//	max_alarm	not set for	PhaseSpeed
	//	min_alarm	not set for	PhaseSpeed
	//	max_warning	not set for	PhaseSpeed
	//	min_warning	not set for	PhaseSpeed
	//	delta_t	not set for	PhaseSpeed
	//	delta_val	not set for	PhaseSpeed
	phasespeed->set_default_properties(phasespeed_prop);
	phasespeed->set_polling_period(2000);
	phasespeed->set_disp_level(Tango::EXPERT);
	phasespeed->set_memorized();
	phasespeed->set_memorized_init(true);
	//	PhaseSpeed does not fire change event
	//	PhaseSpeed does not fire archive event
	//	PhaseSpeed does not fire data_ready event
	att_list.push_back(phasespeed);

	//	Attribute : TaperAcceleration
	TaperAccelerationAttrib	*taperacceleration = new TaperAccelerationAttrib();
	Tango::UserDefaultAttrProp	taperacceleration_prop;
	taperacceleration_prop.set_description("Taper movement average acceleration in um/s^2.");
	//	label	not set for	TaperAcceleration
	taperacceleration_prop.set_unit("um/s^2");
	//	standard_unit	not set for	TaperAcceleration
	//	display_unit	not set for	TaperAcceleration
	//	format	not set for	TaperAcceleration
	//	max_value	not set for	TaperAcceleration
	//	min_value	not set for	TaperAcceleration
	//	max_alarm	not set for	TaperAcceleration
	//	min_alarm	not set for	TaperAcceleration
	//	max_warning	not set for	TaperAcceleration
	//	min_warning	not set for	TaperAcceleration
	//	delta_t	not set for	TaperAcceleration
	//	delta_val	not set for	TaperAcceleration
	taperacceleration->set_default_properties(taperacceleration_prop);
	//	Not Polled
	taperacceleration->set_disp_level(Tango::EXPERT);
	taperacceleration->set_memorized();
	taperacceleration->set_memorized_init(true);
	//	TaperAcceleration does not fire change event
	//	TaperAcceleration does not fire archive event
	//	TaperAcceleration does not fire data_ready event
	att_list.push_back(taperacceleration);

	//	Attribute : Taper
	TaperAttrib	*taper = new TaperAttrib();
	Tango::UserDefaultAttrProp	taper_prop;
	taper_prop.set_description("Read-back and set-point value for the current taper. \nWill be applied next time the GapSetpoint attribute is modified.");
	//	label	not set for	Taper
	taper_prop.set_unit("um");
	//	standard_unit	not set for	Taper
	//	display_unit	not set for	Taper
	//	format	not set for	Taper
	//	max_value	not set for	Taper
	//	min_value	not set for	Taper
	//	max_alarm	not set for	Taper
	//	min_alarm	not set for	Taper
	//	max_warning	not set for	Taper
	//	min_warning	not set for	Taper
	//	delta_t	not set for	Taper
	//	delta_val	not set for	Taper
	taper->set_default_properties(taper_prop);
	taper->set_polling_period(2000);
	taper->set_disp_level(Tango::EXPERT);
	taper->set_memorized();
	taper->set_memorized_init(true);
	//	Taper does not fire change event
	//	Taper does not fire archive event
	//	Taper does not fire data_ready event
	att_list.push_back(taper);

	//	Attribute : Offset
	OffsetAttrib	*offset = new OffsetAttrib();
	Tango::UserDefaultAttrProp	offset_prop;
	offset_prop.set_description("Read-back and set-point value for the current vertical offset. \nWill be applied next time the Gap attribute is modified.");
	//	label	not set for	Offset
	offset_prop.set_unit("um");
	//	standard_unit	not set for	Offset
	//	display_unit	not set for	Offset
	//	format	not set for	Offset
	//	max_value	not set for	Offset
	//	min_value	not set for	Offset
	//	max_alarm	not set for	Offset
	//	min_alarm	not set for	Offset
	//	max_warning	not set for	Offset
	//	min_warning	not set for	Offset
	//	delta_t	not set for	Offset
	//	delta_val	not set for	Offset
	offset->set_default_properties(offset_prop);
	offset->set_polling_period(2000);
	offset->set_disp_level(Tango::EXPERT);
	offset->set_memorized();
	offset->set_memorized_init(true);
	//	Offset does not fire change event
	//	Offset does not fire archive event
	//	Offset does not fire data_ready event
	att_list.push_back(offset);

	//	Attribute : TaperSpeed
	TaperSpeedAttrib	*taperspeed = new TaperSpeedAttrib();
	Tango::UserDefaultAttrProp	taperspeed_prop;
	taperspeed_prop.set_description("Final profile velocity in um/s for taper movements.");
	//	label	not set for	TaperSpeed
	taperspeed_prop.set_unit("um/s");
	//	standard_unit	not set for	TaperSpeed
	//	display_unit	not set for	TaperSpeed
	//	format	not set for	TaperSpeed
	//	max_value	not set for	TaperSpeed
	//	min_value	not set for	TaperSpeed
	//	max_alarm	not set for	TaperSpeed
	//	min_alarm	not set for	TaperSpeed
	//	max_warning	not set for	TaperSpeed
	//	min_warning	not set for	TaperSpeed
	//	delta_t	not set for	TaperSpeed
	//	delta_val	not set for	TaperSpeed
	taperspeed->set_default_properties(taperspeed_prop);
	taperspeed->set_polling_period(1000);
	taperspeed->set_disp_level(Tango::EXPERT);
	taperspeed->set_memorized();
	taperspeed->set_memorized_init(true);
	//	TaperSpeed does not fire change event
	//	TaperSpeed does not fire archive event
	//	TaperSpeed does not fire data_ready event
	att_list.push_back(taperspeed);

	//	Attribute : LimitsDisabled
	LimitsDisabledAttrib	*limitsdisabled = new LimitsDisabledAttrib();
	Tango::UserDefaultAttrProp	limitsdisabled_prop;
	limitsdisabled_prop.set_description("Indicates that the software limits on the DMCs are disabled. \nUseful for commissioning and engineering movements.");
	//	label	not set for	LimitsDisabled
	//	unit	not set for	LimitsDisabled
	//	standard_unit	not set for	LimitsDisabled
	//	display_unit	not set for	LimitsDisabled
	//	format	not set for	LimitsDisabled
	//	max_value	not set for	LimitsDisabled
	//	min_value	not set for	LimitsDisabled
	//	max_alarm	not set for	LimitsDisabled
	//	min_alarm	not set for	LimitsDisabled
	//	max_warning	not set for	LimitsDisabled
	//	min_warning	not set for	LimitsDisabled
	//	delta_t	not set for	LimitsDisabled
	//	delta_val	not set for	LimitsDisabled
	limitsdisabled->set_default_properties(limitsdisabled_prop);
	limitsdisabled->set_polling_period(2000);
	limitsdisabled->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	LimitsDisabled does not fire change event
	//	LimitsDisabled does not fire archive event
	//	LimitsDisabled does not fire data_ready event
	att_list.push_back(limitsdisabled);

	//	Attribute : StopAll
	StopAllAttrib	*stopall = new StopAllAttrib();
	Tango::UserDefaultAttrProp	stopall_prop;
	stopall_prop.set_description("Indicates that the undulator is in StopAll state inhibiting all motion.");
	//	label	not set for	StopAll
	//	unit	not set for	StopAll
	//	standard_unit	not set for	StopAll
	//	display_unit	not set for	StopAll
	//	format	not set for	StopAll
	//	max_value	not set for	StopAll
	//	min_value	not set for	StopAll
	//	max_alarm	not set for	StopAll
	//	min_alarm	not set for	StopAll
	//	max_warning	not set for	StopAll
	//	min_warning	not set for	StopAll
	//	delta_t	not set for	StopAll
	//	delta_val	not set for	StopAll
	stopall->set_default_properties(stopall_prop);
	stopall->set_polling_period(2000);
	stopall->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	StopAll does not fire change event
	//	StopAll does not fire archive event
	//	StopAll does not fire data_ready event
	att_list.push_back(stopall);

	//	Attribute : GapMoving
	GapMovingAttrib	*gapmoving = new GapMovingAttrib();
	Tango::UserDefaultAttrProp	gapmoving_prop;
	gapmoving_prop.set_description("Indicates that gap movement is in progress. \nUsed to distinguish whether gap, phase or both are moving.");
	//	label	not set for	GapMoving
	//	unit	not set for	GapMoving
	//	standard_unit	not set for	GapMoving
	//	display_unit	not set for	GapMoving
	//	format	not set for	GapMoving
	//	max_value	not set for	GapMoving
	//	min_value	not set for	GapMoving
	//	max_alarm	not set for	GapMoving
	//	min_alarm	not set for	GapMoving
	//	max_warning	not set for	GapMoving
	//	min_warning	not set for	GapMoving
	//	delta_t	not set for	GapMoving
	//	delta_val	not set for	GapMoving
	gapmoving->set_default_properties(gapmoving_prop);
	gapmoving->set_polling_period(2000);
	gapmoving->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	GapMoving does not fire change event
	//	GapMoving does not fire archive event
	//	GapMoving does not fire data_ready event
	att_list.push_back(gapmoving);

	//	Attribute : PhaseMoving
	PhaseMovingAttrib	*phasemoving = new PhaseMovingAttrib();
	Tango::UserDefaultAttrProp	phasemoving_prop;
	phasemoving_prop.set_description("Indicates that phase movement is in progress. \nUsed to distinguish whether gap, phase or both are moving.");
	//	label	not set for	PhaseMoving
	//	unit	not set for	PhaseMoving
	//	standard_unit	not set for	PhaseMoving
	//	display_unit	not set for	PhaseMoving
	//	format	not set for	PhaseMoving
	//	max_value	not set for	PhaseMoving
	//	min_value	not set for	PhaseMoving
	//	max_alarm	not set for	PhaseMoving
	//	min_alarm	not set for	PhaseMoving
	//	max_warning	not set for	PhaseMoving
	//	min_warning	not set for	PhaseMoving
	//	delta_t	not set for	PhaseMoving
	//	delta_val	not set for	PhaseMoving
	phasemoving->set_default_properties(phasemoving_prop);
	phasemoving->set_polling_period(2000);
	phasemoving->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	PhaseMoving does not fire change event
	//	PhaseMoving does not fire archive event
	//	PhaseMoving does not fire data_ready event
	att_list.push_back(phasemoving);

	//	Attribute : EngineeringGapSpeed
	EngineeringGapSpeedAttrib	*engineeringgapspeed = new EngineeringGapSpeedAttrib();
	Tango::UserDefaultAttrProp	engineeringgapspeed_prop;
	engineeringgapspeed_prop.set_description("Final profile velocity in um/s for gap axes engineering movement.");
	//	label	not set for	EngineeringGapSpeed
	engineeringgapspeed_prop.set_unit("um/s");
	//	standard_unit	not set for	EngineeringGapSpeed
	//	display_unit	not set for	EngineeringGapSpeed
	//	format	not set for	EngineeringGapSpeed
	//	max_value	not set for	EngineeringGapSpeed
	//	min_value	not set for	EngineeringGapSpeed
	//	max_alarm	not set for	EngineeringGapSpeed
	//	min_alarm	not set for	EngineeringGapSpeed
	//	max_warning	not set for	EngineeringGapSpeed
	//	min_warning	not set for	EngineeringGapSpeed
	//	delta_t	not set for	EngineeringGapSpeed
	//	delta_val	not set for	EngineeringGapSpeed
	engineeringgapspeed->set_default_properties(engineeringgapspeed_prop);
	engineeringgapspeed->set_polling_period(2000);
	engineeringgapspeed->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	EngineeringGapSpeed does not fire change event
	//	EngineeringGapSpeed does not fire archive event
	//	EngineeringGapSpeed does not fire data_ready event
	att_list.push_back(engineeringgapspeed);

	//	Attribute : EngineeringPhaseSpeed
	EngineeringPhaseSpeedAttrib	*engineeringphasespeed = new EngineeringPhaseSpeedAttrib();
	Tango::UserDefaultAttrProp	engineeringphasespeed_prop;
	engineeringphasespeed_prop.set_description("Final profile velocity in um/s for phase axes engineering movement.");
	//	label	not set for	EngineeringPhaseSpeed
	engineeringphasespeed_prop.set_unit("um/s");
	//	standard_unit	not set for	EngineeringPhaseSpeed
	//	display_unit	not set for	EngineeringPhaseSpeed
	//	format	not set for	EngineeringPhaseSpeed
	//	max_value	not set for	EngineeringPhaseSpeed
	//	min_value	not set for	EngineeringPhaseSpeed
	//	max_alarm	not set for	EngineeringPhaseSpeed
	//	min_alarm	not set for	EngineeringPhaseSpeed
	//	max_warning	not set for	EngineeringPhaseSpeed
	//	min_warning	not set for	EngineeringPhaseSpeed
	//	delta_t	not set for	EngineeringPhaseSpeed
	//	delta_val	not set for	EngineeringPhaseSpeed
	engineeringphasespeed->set_default_properties(engineeringphasespeed_prop);
	engineeringphasespeed->set_polling_period(2000);
	engineeringphasespeed->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	EngineeringPhaseSpeed does not fire change event
	//	EngineeringPhaseSpeed does not fire archive event
	//	EngineeringPhaseSpeed does not fire data_ready event
	att_list.push_back(engineeringphasespeed);

	//	Attribute : EngineeringGapAcceleration
	EngineeringGapAccelerationAttrib	*engineeringgapacceleration = new EngineeringGapAccelerationAttrib();
	Tango::UserDefaultAttrProp	engineeringgapacceleration_prop;
	engineeringgapacceleration_prop.set_description("Gap axes engineering movement average acceleration/deceleration in um/s^2.");
	//	label	not set for	EngineeringGapAcceleration
	engineeringgapacceleration_prop.set_unit("um/s^2");
	//	standard_unit	not set for	EngineeringGapAcceleration
	//	display_unit	not set for	EngineeringGapAcceleration
	//	format	not set for	EngineeringGapAcceleration
	//	max_value	not set for	EngineeringGapAcceleration
	//	min_value	not set for	EngineeringGapAcceleration
	//	max_alarm	not set for	EngineeringGapAcceleration
	//	min_alarm	not set for	EngineeringGapAcceleration
	//	max_warning	not set for	EngineeringGapAcceleration
	//	min_warning	not set for	EngineeringGapAcceleration
	//	delta_t	not set for	EngineeringGapAcceleration
	//	delta_val	not set for	EngineeringGapAcceleration
	engineeringgapacceleration->set_default_properties(engineeringgapacceleration_prop);
	engineeringgapacceleration->set_polling_period(2000);
	engineeringgapacceleration->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	EngineeringGapAcceleration does not fire change event
	//	EngineeringGapAcceleration does not fire archive event
	//	EngineeringGapAcceleration does not fire data_ready event
	att_list.push_back(engineeringgapacceleration);

	//	Attribute : EngineeringPhaseAcceleration
	EngineeringPhaseAccelerationAttrib	*engineeringphaseacceleration = new EngineeringPhaseAccelerationAttrib();
	Tango::UserDefaultAttrProp	engineeringphaseacceleration_prop;
	engineeringphaseacceleration_prop.set_description("Phase axes engineering movement average acceleration/deceleration in um/s^2.");
	//	label	not set for	EngineeringPhaseAcceleration
	engineeringphaseacceleration_prop.set_unit("um/s^2");
	//	standard_unit	not set for	EngineeringPhaseAcceleration
	//	display_unit	not set for	EngineeringPhaseAcceleration
	//	format	not set for	EngineeringPhaseAcceleration
	//	max_value	not set for	EngineeringPhaseAcceleration
	//	min_value	not set for	EngineeringPhaseAcceleration
	//	max_alarm	not set for	EngineeringPhaseAcceleration
	//	min_alarm	not set for	EngineeringPhaseAcceleration
	//	max_warning	not set for	EngineeringPhaseAcceleration
	//	min_warning	not set for	EngineeringPhaseAcceleration
	//	delta_t	not set for	EngineeringPhaseAcceleration
	//	delta_val	not set for	EngineeringPhaseAcceleration
	engineeringphaseacceleration->set_default_properties(engineeringphaseacceleration_prop);
	engineeringphaseacceleration->set_polling_period(2000);
	engineeringphaseacceleration->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	EngineeringPhaseAcceleration does not fire change event
	//	EngineeringPhaseAcceleration does not fire archive event
	//	EngineeringPhaseAcceleration does not fire data_ready event
	att_list.push_back(engineeringphaseacceleration);

	//	Attribute : Interlock
	InterlockAttrib	*interlock = new InterlockAttrib();
	Tango::UserDefaultAttrProp	interlock_prop;
	interlock_prop.set_description("Indicates that interlock is in effect.");
	//	label	not set for	Interlock
	//	unit	not set for	Interlock
	//	standard_unit	not set for	Interlock
	//	display_unit	not set for	Interlock
	//	format	not set for	Interlock
	//	max_value	not set for	Interlock
	//	min_value	not set for	Interlock
	//	max_alarm	not set for	Interlock
	//	min_alarm	not set for	Interlock
	//	max_warning	not set for	Interlock
	//	min_warning	not set for	Interlock
	//	delta_t	not set for	Interlock
	//	delta_val	not set for	Interlock
	interlock->set_default_properties(interlock_prop);
	interlock->set_polling_period(2000);
	interlock->set_disp_level(Tango::OPERATOR);
	//	Not memorized

	//	Interlock does not fire change event
	//	Interlock does not fire archive event
	//	Interlock does not fire data_ready event
	att_list.push_back(interlock);

	//	Attribute : Coil1
	Coil1Attrib	*coil1 = new Coil1Attrib();
	Tango::UserDefaultAttrProp	coil1_prop;
	coil1_prop.set_description("Coil1 Current Setpoint/Readback");
	//	label	not set for	Coil1
	coil1_prop.set_unit("A");
	//	standard_unit	not set for	Coil1
	//	display_unit	not set for	Coil1
	//	format	not set for	Coil1
	//	max_value	not set for	Coil1
	//	min_value	not set for	Coil1
	//	max_alarm	not set for	Coil1
	//	min_alarm	not set for	Coil1
	//	max_warning	not set for	Coil1
	//	min_warning	not set for	Coil1
	//	delta_t	not set for	Coil1
	//	delta_val	not set for	Coil1
	coil1->set_default_properties(coil1_prop);
	//	Not Polled
	coil1->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Coil1 does not fire change event
	//	Coil1 does not fire archive event
	//	Coil1 does not fire data_ready event
	att_list.push_back(coil1);

	//	Attribute : Coil2
	Coil2Attrib	*coil2 = new Coil2Attrib();
	Tango::UserDefaultAttrProp	coil2_prop;
	coil2_prop.set_description("Coil2 Current Setpoint/Readback");
	//	label	not set for	Coil2
	coil2_prop.set_unit("A");
	//	standard_unit	not set for	Coil2
	//	display_unit	not set for	Coil2
	//	format	not set for	Coil2
	//	max_value	not set for	Coil2
	//	min_value	not set for	Coil2
	//	max_alarm	not set for	Coil2
	//	min_alarm	not set for	Coil2
	//	max_warning	not set for	Coil2
	//	min_warning	not set for	Coil2
	//	delta_t	not set for	Coil2
	//	delta_val	not set for	Coil2
	coil2->set_default_properties(coil2_prop);
	//	Not Polled
	coil2->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Coil2 does not fire change event
	//	Coil2 does not fire archive event
	//	Coil2 does not fire data_ready event
	att_list.push_back(coil2);

	//	Attribute : Coil3
	Coil3Attrib	*coil3 = new Coil3Attrib();
	Tango::UserDefaultAttrProp	coil3_prop;
	coil3_prop.set_description("Coil3 Current Setpoint/Readback");
	//	label	not set for	Coil3
	coil3_prop.set_unit("A");
	//	standard_unit	not set for	Coil3
	//	display_unit	not set for	Coil3
	//	format	not set for	Coil3
	//	max_value	not set for	Coil3
	//	min_value	not set for	Coil3
	//	max_alarm	not set for	Coil3
	//	min_alarm	not set for	Coil3
	//	max_warning	not set for	Coil3
	//	min_warning	not set for	Coil3
	//	delta_t	not set for	Coil3
	//	delta_val	not set for	Coil3
	coil3->set_default_properties(coil3_prop);
	//	Not Polled
	coil3->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Coil3 does not fire change event
	//	Coil3 does not fire archive event
	//	Coil3 does not fire data_ready event
	att_list.push_back(coil3);

	//	Attribute : Coil4
	Coil4Attrib	*coil4 = new Coil4Attrib();
	Tango::UserDefaultAttrProp	coil4_prop;
	coil4_prop.set_description("Coil4 Current Setpoint/Readback");
	//	label	not set for	Coil4
	coil4_prop.set_unit("A");
	//	standard_unit	not set for	Coil4
	//	display_unit	not set for	Coil4
	//	format	not set for	Coil4
	//	max_value	not set for	Coil4
	//	min_value	not set for	Coil4
	//	max_alarm	not set for	Coil4
	//	min_alarm	not set for	Coil4
	//	max_warning	not set for	Coil4
	//	min_warning	not set for	Coil4
	//	delta_t	not set for	Coil4
	//	delta_val	not set for	Coil4
	coil4->set_default_properties(coil4_prop);
	//	Not Polled
	coil4->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	Coil4 does not fire change event
	//	Coil4 does not fire archive event
	//	Coil4 does not fire data_ready event
	att_list.push_back(coil4);

	//	Attribute : CorrectionEnabled
	CorrectionEnabledAttrib	*correctionenabled = new CorrectionEnabledAttrib();
	Tango::UserDefaultAttrProp	correctionenabled_prop;
	correctionenabled_prop.set_description("Enables correction.");
	//	label	not set for	CorrectionEnabled
	//	unit	not set for	CorrectionEnabled
	//	standard_unit	not set for	CorrectionEnabled
	//	display_unit	not set for	CorrectionEnabled
	//	format	not set for	CorrectionEnabled
	//	max_value	not set for	CorrectionEnabled
	//	min_value	not set for	CorrectionEnabled
	//	max_alarm	not set for	CorrectionEnabled
	//	min_alarm	not set for	CorrectionEnabled
	//	max_warning	not set for	CorrectionEnabled
	//	min_warning	not set for	CorrectionEnabled
	//	delta_t	not set for	CorrectionEnabled
	//	delta_val	not set for	CorrectionEnabled
	correctionenabled->set_default_properties(correctionenabled_prop);
	//	Not Polled
	correctionenabled->set_disp_level(Tango::EXPERT);
	//	Not memorized

	//	CorrectionEnabled does not fire change event
	//	CorrectionEnabled does not fire archive event
	//	CorrectionEnabled does not fire data_ready event
	att_list.push_back(correctionenabled);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());

	/*----- PROTECTED REGION ID(Undulator::Class::attribute_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	Undulator::Class::attribute_factory_after

}


//--------------------------------------------------------
/**
 *	Method      : Undulator::UndulatorClass::command_factory()
 *	Description : Create the command object(s)
 *	              and store them in the command list
 */
//--------------------------------------------------------
void UndulatorClass::command_factory()
{
	/*----- PROTECTED REGION ID(Undulator::Class::command_factory_before) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Undulator::Class::command_factory_before

	StopGapClass	*pStopGapCmd =
		new StopGapClass("StopGap",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStopGapCmd);
	ToggleStopAllClass	*pToggleStopAllCmd =
		new ToggleStopAllClass("ToggleStopAll",
			Tango::DEV_BOOLEAN, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pToggleStopAllCmd);
	DisableLimitsClass	*pDisableLimitsCmd =
		new DisableLimitsClass("DisableLimits",
			Tango::DEV_BOOLEAN, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pDisableLimitsCmd);
	StopPhaseClass	*pStopPhaseCmd =
		new StopPhaseClass("StopPhase",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStopPhaseCmd);
	CalibrateGapClass	*pCalibrateGapCmd =
		new CalibrateGapClass("CalibrateGap",
			Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_VOID,
			"Current gap and center.",
			"",
			Tango::EXPERT);
	command_list.push_back(pCalibrateGapCmd);
	CalibratePhaseClass	*pCalibratePhaseCmd =
		new CalibratePhaseClass("CalibratePhase",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pCalibratePhaseCmd);
	LoadCorrectionDataClass	*pLoadCorrectionDataCmd =
		new LoadCorrectionDataClass("LoadCorrectionData",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"filename",
			"",
			Tango::EXPERT);
	command_list.push_back(pLoadCorrectionDataCmd);

	/*----- PROTECTED REGION ID(Undulator::Class::command_factory_after) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Undulator::Class::command_factory_after

}




//===================================================================
//	Dynamic attributes related methods
//===================================================================


//--------------------------------------------------------
/**
 * method : 		UndulatorClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list 
 */
//--------------------------------------------------------
void UndulatorClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;


	/*----- PROTECTED REGION ID(Undulator::Class::create_static_att_list) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Undulator::Class::create_static_att_list

}


//--------------------------------------------------------
/**
 * method : 		UndulatorClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void UndulatorClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{	
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		Undulator *dev = static_cast<Undulator *> (dev_impl);
		
		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()],true);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(Undulator::Class::erase_dynamic_attributes) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Undulator::Class::erase_dynamic_attributes

}



	/*----- PROTECTED REGION ID(Undulator::Class::Additional Methods) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Undulator::Class::Additional Methods

} //	namespace
