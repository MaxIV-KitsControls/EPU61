//=============================================================================
//
// file :         ControlBoxClass.h
//
// description :  Include for the ControlBoxClass root class.
//                This class is represents the singleton class for
//                the ControlBox device class.
//                It contains all properties and methods which the 
//                ControlBox requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author: buteau $
//
// $Revision: 1.5 $
//
// $Log: ControlBoxClass.h,v $
// Revision 1.5  2011/07/15 09:47:42  buteau
// MANTIS 19368
//
// Revision 1.3  2007/01/05 08:37:51  coquet
// * bug corrections
// * now supports negative AxisPositionRatio use it to have a positive move direction opposite to the positive move direction defined by motorist
// * added ControlBox:GetFirmwareRevision, view the firmware revision command <CTRL>R<CTRL>V
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _CONTROLBOXCLASS_H
#define _CONTROLBOXCLASS_H

#include <ControlBox.h>
#include <tango.h>


namespace ControlBox_ns
{
//=====================================
//	Define classes for attributes
//=====================================
class badCommandCounterAttrib: public Tango::Attr
{
public:
	badCommandCounterAttrib():Attr("badCommandCounter", Tango::DEV_LONG, Tango::READ) {};
	~badCommandCounterAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<ControlBox *>(dev))->read_badCommandCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<ControlBox *>(dev))->is_badCommandCounter_allowed(ty);}
};

class oKCommandCounterAttrib: public Tango::Attr
{
public:
	oKCommandCounterAttrib():Attr("oKCommandCounter", Tango::DEV_LONG, Tango::READ) {};
	~oKCommandCounterAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<ControlBox *>(dev))->read_oKCommandCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<ControlBox *>(dev))->is_oKCommandCounter_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class ExecLowLevelCmdClass : public Tango::Command
{
public:
	ExecLowLevelCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ExecLowLevelCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ExecLowLevelCmdClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ControlBox *>(dev))->is_ExecLowLevelCmd_allowed(any);}
};



class GetMicrocodeRevisionClass : public Tango::Command
{
public:
	GetMicrocodeRevisionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetMicrocodeRevisionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetMicrocodeRevisionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ControlBox *>(dev))->is_GetMicrocodeRevision_allowed(any);}
};

class GetFirmwareRevisionClass : public Tango::Command
{
public:
	GetFirmwareRevisionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetFirmwareRevisionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetFirmwareRevisionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ControlBox *>(dev))->is_GetFirmwareRevision_allowed(any);}
};

class StartMicrocodeClass : public Tango::Command
{
public:
	StartMicrocodeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartMicrocodeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartMicrocodeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ControlBox *>(dev))->is_StartMicrocode_allowed(any);}
};



class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ControlBox *>(dev))->is_Reset_allowed(any);}
};



//
// The ControlBoxClass singleton definition
//

class ControlBoxClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static ControlBoxClass *init(const char *);
	static ControlBoxClass *instance();
	~ControlBoxClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	ControlBoxClass(string &);
	static ControlBoxClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace ControlBox_ns

#endif // _CONTROLBOXCLASS_H
