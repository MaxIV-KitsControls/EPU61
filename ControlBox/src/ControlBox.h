//=============================================================================
//
// file : 			 ControlBox.h
//
// description : Include for the ControlBox class.
//
// project :	GalilV2
//
// $Author: buteau $
//
// $Revision: 1.7 $
//
// $Log: ControlBox.h,v $
// Revision 1.7  2011/07/15 09:47:42  buteau
// MANTIS 19368
//
// Revision 1.5  2010/03/25 18:10:22  maven
// "Migration_Tango7"
//
//
// copyleft : 	 European Synchrotron Radiation Facility
//							 BP 220, Grenoble 38043
//							 FRANCE
//
//=============================================================================
//
//			This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//				 (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _CONTROLBOX_H
#define _CONTROLBOX_H

#include <tango.h>

//using namespace Tango;

/**
 * @author	$Author: buteau $
 * @version $Revision: 1.7 $
 */

 // Add your own constants definitions here.
 //-----------------------------------------------


namespace ControlBox_ns
{

/**
 * Class Description:
 * controle au bas niveau la communication avec la carte d'axes Galil DMC2182
 *	le controle d'axe proprement dit est r�alis� par la classe GalilAxis
 */

/*
 *	Device States Description:
 *  Tango::OPEN :   TCP/IP communication opened with controller
 *  Tango::CLOSE :  TCP/IP communication closed with controller
 *  Tango::ALARM :  a completer
 *  Tango::FAULT :  microcode not running...
 */


class ControlBox: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//------------------------------------------------------------- 
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevLong	*attr_oKCommandCounter_read;
		Tango::DevLong	*attr_badCommandCounter_read;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	IP Address of the controller
 */
	string	iPAddress;
/**
 *	TCP/IP port for communication (optional)
 */
	Tango::DevLong	port;
/**
 *	valeur de timeout en secondes
 */
	Tango::DevLong	tCPTimeOut;
/**
 *	polling period pour la commande GetDataRecord
 *	en ms
 */
	Tango::DevLong	dataRecordPollingPeriod;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl Class.
 *	@param s	Device Name
 */
	ControlBox(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl Class.
 *	@param s	Device Name
 */
	ControlBox(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl Class.
 *	@param s	Device name
 *	@param d	Device description.
 */
	ControlBox(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */ 
	~ControlBox() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name ControlBox methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for oKCommandCounter acquisition result.
 */
	virtual void read_oKCommandCounter(Tango::Attribute &attr);
/**
 *	Extract real attribute values for badCommandCounter acquisition result.
 */
	virtual void read_badCommandCounter(Tango::Attribute &attr);
/**
 *	Read/Write allowed for oKCommandCounter attribute.
 */
	virtual bool is_oKCommandCounter_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for badCommandCounter attribute.
 */
	virtual bool is_badCommandCounter_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Reset command.
 */
	virtual bool is_Reset_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for StartMicrocode command.
 */
	virtual bool is_StartMicrocode_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetMicrocodeRevision command.
 */
	virtual bool is_GetMicrocodeRevision_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetFirmwareRevision command.
 */
	virtual bool is_GetFirmwareRevision_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ExecLowLevelCmd command.
 */
	virtual bool is_ExecLowLevelCmd_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();
/**
 * This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *	@return	Status description
 *	@exception DevFailed
 */
	virtual Tango::ConstDevString	dev_status();
/**
 * resets the controlbox : Galil cmd RS
 *	@exception DevFailed
 */
	void	reset();
/**
 * starts the micocode in the controlbox
 *	@exception DevFailed
 */
	void	start_microcode();
/**
 * returns the micro-code revision as string,
 *	generic micro-code revision + specific micro-code revision if any
 *	@return	the microcode revision 
 *	@exception DevFailed
 */
	Tango::DevString	get_microcode_revision();
/**
 * returns the firmware revision as a string
 *	@return	the firmware revision 
 *	@exception DevFailed
 */
	Tango::DevString	get_firmware_revision();
/**
 * Executes a low level (or expert command) on the controller then returns the reply.
 *	@param	argin	the cmd to execute
 *	@return	the cmd reply
 *	@exception DevFailed
 */
	Tango::DevString	exec_low_level_cmd(Tango::DevString);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//------------------------------------------------------------- 



protected : 
	//	Add your own data members here
	//-----------------------------------------

	//- init utilities
	bool m_init_device_done;
	bool m_properties_missing;

  //- the device status string
	std::string m_status_str;
  std::string current_status;

  //- check wether or not the device is properly init
  void check_init () 
    throw (Tango::DevFailed);
};

} // namespace_ns

#endif	// _CONTROLBOX_H
