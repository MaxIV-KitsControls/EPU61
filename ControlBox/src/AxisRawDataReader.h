//=============================================================================
//
// file :        AxisRawDataReader.h
//
// description : Include for the AxisRawDataReader class.
//
// project :	AxisRawDataReader
//
// $Author: buteau $
//
// $Revision: 1.12 $
//
// $Log: AxisRawDataReader.h,v $
// Revision 1.12  2011/07/15 09:47:42  buteau
// MANTIS 19368
//
// Revision 1.11  2011/07/15 09:40:53  buteau
// MANTIS 19368
//
// Revision 1.10  2011/05/27 13:45:28  coquet
// added attribute positionError to AxisRawDataDeader
// TO BE TESTED
//
// Revision 1.9  2010/03/25 18:10:22  maven
// "Migration_Tango7"
//
// Revision 1.8  2008/10/17 07:06:15  coquet
// added attribute velocity to AxosRawDataReader
// to be tested
//
// Revision 1.7  2008/09/25 14:29:11  coquet
// Attribute AxisNumber is now memorized Write on Hardware at Init
// (was simply memorized before)
//
// Revision 1.6  2007/06/05 15:29:22  leclercq
// Changed RawDataReader impl (no more axis - use shrared HwIO instead)
//
// Revision 1.5  2007/06/04 12:28:57  coquet
// AxisRawDataReader :
// added latch encoder position support
// added 2 attributes
// latchIsArmed, RO, bool, reports that latch feature is ready to capture encoder position
// latchOccured reports that latch occured since last latch arming
// added 2 commands
// ArmLatch arms the latch feature
// ReportLatchedPosition returns the last lached position ( exception if latch did not occured)
//
// Revision 1.4  2007/04/19 14:04:08  coquet
// Axis::State and Axis::Status :
// when motor is servo or when stepper without encoder : no complains about YA,YB,YC
// AxisRawDataReader :
// minor change (axisLetter is now just belox axisNumer)
// Slit : no real change
//
// Revision 1.3  2007/04/19 08:26:23  coquet
// AxisRawDataReader :
// added 3 attributes
// * axisLetter
// * latchInput
// * homeInput
// GalilSSlit :
// * added tips in Status to come out of Limit switchs if necessary
// * added boolean property InvertPositionDirection to allow user to invert the positive direction if necessary
// GalilAxis :
// * attribute position is in ALARM if positionning failed
// * internal "EncoderMotorRatio" is set to 1.0 when motor is servo (according to bit 0 of Stat[x])  or if stepper motor has no encoder.
//
// Revision 1.2  2007/01/08 14:45:18  coquet
// AxisRawDataReader device first tests :
// bug corrections.
//
// Revision 1.1  2007/01/08 11:19:54  coquet
// added AxisRawDataReader device
// this devices offers read-only acces to raw data of an axis (selected by an attribute)
// added the files AxisRawDataReader*.*,
// modified ClassFactory, Makefile.vc, DevicesGalilV2.dsp Visual Studio project
//
//
// copyleft :  Synchrotron SOLEIL
//             L'Orme des Merisiers
//             Saint-Aubin - BP 48
//             FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _AXISRAWDATAREADER_H
#define _AXISRAWDATAREADER_H

#include <tango.h>
#include <BitsRecords.h>

//- galil support stuffs
#include <ObjectManager.h>
#include <Box.h>

//using namespace Tango;

/**
 * @author	$Author: buteau $
 * @version	$Revision: 1.12 $
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------


namespace AxisRawDataReader_ns
{

/**
 * Class Description:
 * provides read-only raw data from the specified axis
 */

/*
 *	Device States Description:
*  Tango::OPEN :     communication with CB OK
*  Tango::UNKNOWN :  communication with CB failed
 */


class AxisRawDataReader: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevUShort	*attr_axisNumber_read;
		Tango::DevUShort	attr_axisNumber_write;
		Tango::DevString	*attr_axisLetter_read;
		Tango::DevLong	*attr_encoder_read;
		Tango::DevLong	*attr_auxiliary_read;
		Tango::DevLong	*attr_commandedPos_read;
		Tango::DevLong	*attr_velocity_read;
		Tango::DevDouble	*attr_analogInput_read;
		Tango::DevBoolean	*attr_homeInput_read;
		Tango::DevBoolean	*attr_latchInput_read;
		Tango::DevBoolean	*attr_latchOccured_read;
		Tango::DevBoolean	*attr_latchIsArmed_read;
		Tango::DevLong	*attr_positionError_read;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	AxisRawDataReader(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	AxisRawDataReader(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	AxisRawDataReader(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
	~AxisRawDataReader() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name AxisRawDataReader methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for axisNumber acquisition result.
 */
	virtual void read_axisNumber(Tango::Attribute &attr);
/**
 *	Write axisNumber attribute values to hardware.
 */
	virtual void write_axisNumber(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for axisLetter acquisition result.
 */
	virtual void read_axisLetter(Tango::Attribute &attr);
/**
 *	Extract real attribute values for encoder acquisition result.
 */
	virtual void read_encoder(Tango::Attribute &attr);
/**
 *	Extract real attribute values for auxiliary acquisition result.
 */
	virtual void read_auxiliary(Tango::Attribute &attr);
/**
 *	Extract real attribute values for commandedPos acquisition result.
 */
	virtual void read_commandedPos(Tango::Attribute &attr);
/**
 *	Extract real attribute values for velocity acquisition result.
 */
	virtual void read_velocity(Tango::Attribute &attr);
/**
 *	Extract real attribute values for analogInput acquisition result.
 */
	virtual void read_analogInput(Tango::Attribute &attr);
/**
 *	Extract real attribute values for homeInput acquisition result.
 */
	virtual void read_homeInput(Tango::Attribute &attr);
/**
 *	Extract real attribute values for latchInput acquisition result.
 */
	virtual void read_latchInput(Tango::Attribute &attr);
/**
 *	Extract real attribute values for latchOccured acquisition result.
 */
	virtual void read_latchOccured(Tango::Attribute &attr);
/**
 *	Extract real attribute values for latchIsArmed acquisition result.
 */
	virtual void read_latchIsArmed(Tango::Attribute &attr);
/**
 *	Extract real attribute values for positionError acquisition result.
 */
	virtual void read_positionError(Tango::Attribute &attr);
/**
 *	Read/Write allowed for axisNumber attribute.
 */
	virtual bool is_axisNumber_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for axisLetter attribute.
 */
	virtual bool is_axisLetter_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for encoder attribute.
 */
	virtual bool is_encoder_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for auxiliary attribute.
 */
	virtual bool is_auxiliary_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for commandedPos attribute.
 */
	virtual bool is_commandedPos_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for velocity attribute.
 */
	virtual bool is_velocity_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for analogInput attribute.
 */
	virtual bool is_analogInput_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for homeInput attribute.
 */
	virtual bool is_homeInput_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for latchInput attribute.
 */
	virtual bool is_latchInput_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for latchOccured attribute.
 */
	virtual bool is_latchOccured_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for latchIsArmed attribute.
 */
	virtual bool is_latchIsArmed_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for positionError attribute.
 */
	virtual bool is_positionError_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for ReportLatchedPosition command.
 */
	virtual bool is_ReportLatchedPosition_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ArmLatch command.
 */
	virtual bool is_ArmLatch_allowed(const CORBA::Any &any);
/**
 * returns the last latched encoder position
 *	exception thrown if there is no latched position
 *	@return	the encoder value latched
 *	@exception DevFailed
 */
	Tango::DevLong	report_latched_position();
/**
 * arms the latch function to capture the encoder position on edge of latch input
 *	@exception DevFailed
 */
	void	arm_latch();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------
  //- the axis class
	galil::FirmwareAxisState m_fas;
	galil::AxisIdentifier m_axis_id;
	bool m_init_device_done;
};

}	// namespace_ns

#endif	// _AXISRAWDATAREADER_H
